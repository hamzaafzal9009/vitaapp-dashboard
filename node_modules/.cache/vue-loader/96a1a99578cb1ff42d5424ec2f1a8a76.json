{"remainingRequest":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/src/components/Customers.vue?vue&type=style&index=0&id=558141d5&scoped=true&lang=css&","dependencies":[{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/src/components/Customers.vue","mtime":1581270622000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZWwtcG9wcGVyIHsKICBtYXJnaW4tcmlnaHQ6IDEyNXB4Owp9CgouaW5wdXQtZ3JvdXAtY2hhbmdlIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgei1pbmRleDogOTk5OTsKICAvKiBkaXNwbGF5OiBmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IHJvdzsgKi8KICBtYXJnaW4tdG9wOiAxMHB4Owp9CgouaW5wdXQtZ3JvdXAtYWRkb24gewogIGJvcmRlci1yaWdodDogbm9uZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyOwogIGNvbG9yOiAjNzU3NTc1OwogIGZvbnQtc2l6ZTogMTZweDsKfQouaW5wdXQtZ3JvdXAtZmllbGQgewogIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmE7CiAgYm9yZGVyOiBub25lICFpbXBvcnRhbnQ7Cn0KLmN1c3RvbWVyLWNvbnRyb2xzLWFkZCB7CiAgZmxvYXQ6IGxlZnQ7CiAgcGFkZGluZzogMTBweCAxMHB4IDAgMDsKICBjdXJzb3I6IHBvaW50ZXI7CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBjb2xvcjogIzRmY2JjNTsKfQoKLmN1c3RvbWVyLWNvbnRyb2xzLWFkZCBzcGFuIHsKICBmb250LXNpemU6IDEycHg7CiAgbWFyZ2luLXRvcDogNHB4OwogIGNvbG9yOiAjNTQ1NDU0Owp9CgouY3VzdG9tZXItY29udHJvbHMtYWRkIGkgewogIGZvbnQtc2l6ZTogMTZwdDsKfQoKLmN1c3RvbWVyLWNvbnRyb2xzLWFkZCBpbnB1dCB7CiAgZGlzcGxheTogbm9uZTsKfQoKLmRyb3Bkb3duLWl0ZW0gewogIG1hcmdpbjogMTBweCAyMHB4OwogIGNvbG9yOiAjOWE5YTlhOwp9CgouZWwtbGluay5lbC1saW5rLS1kZWZhdWx0IHsKICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7Cn0KCi5pbnB1dC1ncm91cC1hZGRvbiAuZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7CiAgYm9yZGVyOiBub25lOwp9Ci5yZXNvbHZlZFJvdyB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjZmOSAhaW1wb3J0YW50Owp9Ci51blJlc29sdmVkUm93IHsKICBmb250LXdlaWdodDogYm9sZDsKICBjb2xvcjogIzIxMjEyMDsKfQoKLmN1c3RvbWVyLW1hc3MtYWN0aW9ucy1tZW51IHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47Cn0KCi5wZXItcGFnZS1zZWxlY3QgewogIG1heC13aWR0aDogODBweDsKfQoKLmRhcmtlbmVkIHsKICBiYWNrZ3JvdW5kOiAjOWE5YTlhOwogIGNvbG9yOiB3aGl0ZTsKfQoKLmZhLWNhcmV0LWRvd24gewogIG1hcmdpbi1sZWZ0OiAxMHB4OwoKfQoKLnRhZ3MtbWVudSB7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgYm94LXNoYWRvdzogMCAzcHggNnB4IHJnYmEoMCwgMCwgMCwgLjI1KTsKICBwYWRkaW5nOiAxMHB4IDIwcHg7ICAKICBtYXgtd2lkdGg6IDIwMHB4Owp9CgoudGFncy1tZW51LWJ1dHRvbnMgewogIHdpZHRoOiAxMDAlOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IHJvdzsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBtYXJnaW4tdG9wOiA1cHg7Cn0KCi50YWdzLWNvbnRhaW5lciB7CiAgd2lkdGg6IDEwMCU7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKfQoKLmZpbHRlci1idXR0b24gewogIHdpZHRoOiA2MHB4OwogIGhlaWdodDogNTBweDsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7Cn0KCg=="},{"version":3,"sources":["Customers.vue"],"names":[],"mappingsmfile":"Customers.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"wrapper card-min-height\">\n    <el-card v-if=\"!showCustomerDetail\">\n      <div class=\"card-header\">\n        <div class=\"card-title\">\n          <h3>Customers</h3>\n        </div>\n        <div class=\"card-actions\">\n          <el-button\n            type=\"primary\"\n            @click=\"$refs.csvInput.click()\">\n            +<i class=\"fa fa-users fa-flip-horizontal\"></i>\n            Bulk Upload\n          </el-button>\n          <input\n            ref=\"csvInput\"\n            type=\"file\"\n          style=\"display:none\"\n            accept=\"text/csv\"\n            @change=\"massAddCustomer\"\n          />\n          <el-button\n            type=\"primary\"\n            @click=\"editCustomer()\"\n          >\n          <i class=\"fa fa-user-plus fa-flip-horizontal\"></i>\n             Add Customer\n          </el-button>\n          <div class=\"input-group\">\n            <el-popover trigger=\"click\" class=\"filter clickable\" v-model=\"showFilters\">\n              <div class=\"filter-button\" :class=\"{'filter-active': filtersActive}\" slot=\"reference\">\n                <i class=\"fas fa-filter\"></i>\n              </div>\n              <div class=\"dropdown-filter-menu\">\n                <div class=\"dropdown-filter-option\">\n                  <label>Rating</label>\n                  <el-select v-model=\"filters.ratings\" :collapse-tags=\"true\" multiple>\n                    <el-option v-for=\"rating in 5\" :key=\"rating\" :value=\"rating\">\n                      {{rating}}\n                    </el-option>\n                  </el-select>\n                </div>\n                <div class=\"dropdown-filter-option\">\n                  <label>Status</label>\n                  <el-select round v-model=\"filters.status\" :collapse-tags=\"true\" multiple>\n                    <el-option v-for=\"status in statusFilterOptions\" :key=\"status.value\" :value=\"status.value\" :label=\"status.label\">                      \n                    </el-option>\n                  </el-select>\n                </div>\n                <div class=\"dropdown-filter-option\">\n                  <label>Tags</label>\n                  <el-select v-model=\"filters.tags\" :collapse-tags=\"true\" multiple :multiple-limit=\"4\">\n                    <el-option v-for=\"tag in sortedCustomerTags\" :key=\"tag\" :value=\"tag\">\n                      {{tag}}\n                    </el-option>\n                  </el-select>\n                </div>\n                <div class=\"dropdown-filter-buttons\">\n                  <!-- <span class=\"filter-reset clickable\" @click=\"resetFilters()\">Reset Filters</span> -->\n                  <el-button type=\"text\" size=\"small\" style=\"color:#757575\" @click=\"resetFilters()\">Reset Filters</el-button>\n                  <el-button type=\"warning\" round size=\"small\" @click=\"searchCustomers()\">Apply</el-button>\n                </div>\n              </div>\n            </el-popover>\n            <el-input\n              v-model=\"searchText\"\n              @keyup.native.enter=\"searchCustomers()\"\n              placeholder=\"Search Customers...\"\n            ><i slot=\"suffix\" class=\"far fa-search\"></i></el-input>\n          </div>\n        </div>\n      </div>\n      <el-popover id=\"bulk-menu\"\n                  trigger=\"click\" \n                  placement=\"bottom-end\"                  \n                  >\n        <el-button type=\"primary\" slot=\"reference\" v-show=\"showBulkActions\" size=\"medium\" round>\n          <span >Actions&nbsp;<i class=\"fas fa-caret-down\"></i></span>\n        </el-button>\n        <div class=\"customer-mass-actions-menu\">\n          <el-link round class=\"dropdown-item\" @click=\"massChangeStatus('active')\">\n            Mark as Subscribed\n          </el-link>\n          <el-link round class=\"dropdown-item\" @click=\"massChangeStatus('inactive')\">\n            Mark as Unsubscribed\n          </el-link>\n          <el-link round class=\"dropdown-item\" @click=\"massChangeStatus('deleted')\">\n            Delete Customers\n          </el-link>\n          <el-link round class=\"dropdown-item\" @click=\"openTagsMenu()\">\n            Add Tag(s)\n          </el-link>\n          <div class=\"tags-menu\" v-if=\"showTagsMenu\">\n            <h3>Add Tags</h3>\n            <el-input v-model=\"newTag\" @keyup.native.enter=\"addTagToList\" multiple></el-input>\n            <div class=\"tags-container\">\n              <el-tag v-for=\"(tag, tagIndex) in tagsToAdd\" closable :key=\"tag\" @close=\"removeTagFromList(tagIndex)\">{{tag}}</el-tag>\n            </div>\n            <div class=\"tags-menu-buttons\">\n              <span class=\"discard clickable\" @click=\"discardTags\">Discard</span>\n              <el-button :disabled=\"!tagsToAdd.length\" round type=\"primary\" @click=\"addTags()\">ADD</el-button>\n            </div>\n          </div>\n          <el-link round class=\"dropdown-item\" @click=\"massRequestReview()\">\n            Request Review\n          </el-link>\n        </div>\n      </el-popover>\n      <div class=\"card-body\">\n        <div class=\"block\" v-if=\"customers\">\n          <el-table class=\"card-table-min-height\" \n          :data=\"customers\" \n          row-class-name=\"clickable\" \n          highlight-current-row \n          size=\"small\"\n          empty-text=\"No results found based on your search criteria.\"\n          ref=\"customerTable\" \n          height=\"calc(80vh - var(--navbar-height) - var(--footer-height) - 40px)\" \n          @sort-change=\"handleSort\"\n          @selection-change=\"handleSelectionChange\" \n          @row-click=\"selectCustomer($event)\">\n            <el-table-column type=\"selection\" v-model=\"deleteList\" width=\"50\"></el-table-column>\n            <el-table-column  label=\"Name\" \n                              min-width=\"120\" \n                              prop=\"name\" \n                              sortable=\"custom\" \n                              :sort-orders=\"sortOptions\" \n                              show-overflow-tooltip>\n              <template slot-scope=\"scope\">\n                <span>{{scope.row.firstName}} {{scope.row.lastName}}</span>\n              </template>\n            </el-table-column>\n            <el-table-column prop=\"status\" label=\"Status\" min-width=\"150\">\n              <!-- temp -->\n              <template slot-scope=\"scope\">\n                <span v-if=\"scope.row.status == 'deleted'\" class=\"status-bubble deleted\">{{scope.row.status}}</span>\n                <span v-else-if=\"scope.row.status == 'active'\" class=\"status-bubble subscribed\">Subscribed</span>\n                <span v-else-if=\"scope.row.status == 'inactive'\" class=\"status-bubble unsubscribed\">Unsubscribed</span>\n              </template>\n            </el-table-column>\n            <el-table-column prop=\"rating\" label=\"Rating\" min-width=\"120\" sortable=\"custom\" :sort-orders=\"sortOptions\" >\n              <template slot-scope=\"scope\">\n                <span class=\"star\" v-for=\"star of scope.row.rating\" :key=\"star\"><i style=\"color:#EBC545\" class=\"fas fa-star\"></i></span>\n              </template>\n            </el-table-column>\n            <el-table-column\n              min-width=\"200\"\n              prop=\"location.name\"\n              label=\"Location\"\n              show-overflow-tooltip\n            ></el-table-column>\n            <el-table-column prop=\"tags\" label=\"Tags\" min-width=\"200\" show-overflow-tooltip>\n              <template slot-scope=\"scope\">\n                <el-tag class=\"tag\" size=\"small\" v-for=\"tag in scope.row.tags\" :key=\"tag\">{{ tag }}</el-tag>\n              </template>\n            </el-table-column>\n            <el-table-column label=\"Last Contact\" prop=\"lastContactDate\" min-width=\"140\">\n              <template slot-scope=\"scope\">\n                <span v-if=\"scope.row.lastContactDate\">{{parseDate(scope.row.lastContactDate.date)}}</span>\n                <span v-else>None</span>\n              </template>            \n            </el-table-column>\n          </el-table>\n        </div>\n        <div class=\"pagination block\" v-if=\"customers && customers.length\">\n          <span>Showing {{customers.length}} of {{paginationData.total}} Total Results</span>\n          <el-pagination\n            @current-change=\"searchCustomers\"\n            background\n            layout=\"prev, pager, next\"\n            :current-page=\"paginationPage\"\n            :page-size=\"paginationData.perPage\"\n            :total=\"paginationData.total\"\n            small\n          ></el-pagination>\n          <el-select class=\"per-page-select\" size=\"mini\" v-model=\"paginationData.perPage\" @change=\"searchCustomers()\">\n            <el-option v-for=\"option in paginationData.perPageOptions\"\n                       :value=\"option\"\n                       :key=\"option\"                       \n            >{{option}}\n            </el-option>\n          </el-select>\n        </div>        \n        <div class=\"block\" v-else></div>\n\n        <!-- <list-table :listName=\"'Customers'\" :headers=\"listHeaders\" :data=\"customers\" :sort=\"sortType\" v-on:toggleSort=\"toggleSort($event)\"></list-table> -->\n      </div>\n    </el-card>\n      <customerDetail :selectedCustomer=\"selectedCustomer\" v-if=\"showCustomerDetail\" @back=\"closeCustomerDetails()\" @closeModal=\"closeCustomerDetails()\"/>\n      <addCustomer :selectedCustomer=\"selectedCustomer\" :openCustomerModal=\"openCustomerModal\" v-if=\"openCustomerModal\" @closeModal=\"closeCustomerModal()\"/>\n      <!-- <CSVPreview :rawData=\"rawData\" :fileName=\"fileName\" v-if=\"previewCSV\" @closeModal=\"closeCustomerModal()\" />     -->\n      <CSVOld :rawData=\"rawData\" :fileName=\"fileName\" v-if=\"previewCSV\" @closeModal=\"closeCustomerModal()\" />\n      <requestReview v-if=\"requestModal\" :requestModal=\"requestModal\" @close=\"requestModal = false\" />\n  </div>\n</template>\n\n<script>\n  import UserService from \"../services/UserService\";\n  import RequestReview from \"./RequestReview\";\n  import CustomerService from \"../services/CustomerService\";\n  import LocationService from \"../services/LocationService\";\n  import { EventService } from \"../main\";\n  import AddCustomer from \"./AddCustomer\";\n  import CustomerDetail from \"./CustomerDetail\";\n  import CSVPreview from \"./CSVPreview\";\n  import CSVOld from \"./CSVOld\";\n  import Papa from \"../../node_modules/papaparse/papaparse.js\";\n  import Vue from 'vue'\n  import imageFile from '../assets/imageFile.js';\n  // Vue.use(Select)\n  // Vue.use(Option)\n\n  export default {\n    components : {\n      CustomerDetail,\n      AddCustomer,\n      CSVPreview,\n      CSVOld,\n      RequestReview\n    },\n  data: function() {\n    return {\n      selected: \"all\",\n      customers: [],\n      filters: {\n        ratings: [],\n        status: [],\n        tags: []\n      },\n      sortOptions: ['ascending', 'descending'],\n      statusFilterOptions: [{label: 'Subscribed', value: 'active'}, {label: 'Unsubscribed', value: 'inactive'}],\n      requestModal: false,\n      showFilters: false,\n      showTagsMenu: false,\n      newTag: '',\n      tagsToAdd: [],\n      showCustomerDetail: false,\n      displayInfo: true,\n      displayNotes: false,\n      displayTags: false,\n      displayAdmin: false,\n      displayContact: true,\n      addingNote: false,\n      searchText: \"\",\n      newNote: \"\",\n      newTag: \"\",\n      selectedType: false,\n      selectedView: \"chat\",\n      openCustomerModal: false,\n      openCustomerDetailModal: false,\n      displayNoteModal: false,\n      selectedCustomer: null,\n      selectedCustomerNotes: [],\n      showCustomerChat: false,\n      previewCSV: false,\n      requestAgain: false,\n      sortType: \"name\",\n      deleteList: [],\n      displayButtons: false,\n      rawData: [],\n      locationSelected: \"\",\n      locations: [],\n      isSuperAdmin: false,\n      statusFilter: \"\",\n      ratingFilter: \"\",\n      locationFilter: \"\",\n      totalResults: 0,\n      totalUnread: 0,\n      selectedPage: 0,\n      moreCustomersToLoad: false,\n      scrollObserver: null,\n      fileName: \"\",\n      allS: false,\n      selectedLocationQs: \"\",\n      userRole: \"\",\n      locationName: \"\",\n      rawData: \"\",\n      note: \"\",\n      paginationData: {\n        perPage: 25,\n        currentPage: 0,\n        perPageOptions: [5, 10, 25],\n        total: 0,      \n      },\n      customerTags: []\n    };\n  },\n  computed: {\n    sortedCustomerTags() {\n      let vm = this;\n      return vm.customerTags.sort();\n    },\n    filtersActive() {\n      let vm = this;\n      if(vm.filters.ratings.length || vm.filters.status.length || vm.filters.tags.length) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    getActiveStatus: function() {\n      var status = this.customers.status;\n      if (status == \"active\") {\n        return \"subscribed\";\n      } else if (status == \"inactive\") {\n        return \"unsubscribed\";\n      } else {\n        return \"deleted\";\n      }\n    },\n    paginationPage() {\n      return (this.paginationData.currentPage+1);\n    },\n    showBulkActions() {\n      let vm = this;\n      if(vm.deleteList && vm.deleteList.length) {\n        return true;\n      }\n      return false;\n    }\n  },\n  created() {\n    if (this.$route.params.customerId) {\n      let routeCustomerId = this.$route.params.customerId;\n      CustomerService.getCustomer(routeCustomerId).then(res => {\n        this.selectCustomer(res);\n      });\n    }\n    if (this.$route.query.list) {\n      this.changeSelected(\"unreplied\");\n    } else {\n      this.checkForAdmin();\n    }\n\n    UserService.logPageVisit(\"customerList\");\n    this.locationSelected = localStorage.getItem(\"locationId\");\n    this.getLocationQs();\n    this.getLocationCustomerTags();\n    this.getUser();\n    this.searchCustomers(0);\n    EventService.$on(\"locationChange\", this.locationChange);\n    EventService.$on(\"reloadCustomerChatList\", this.reloadCustomerChatList);\n    EventService.$on(\n      \"setActiveCustomerAsUnresolved\",\n      this.setActiveCustomerAsUnresolved\n    );\n  },\n  beforeDestroy: function() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n    this.scrollObserver.disconnect();\n    EventService.$off(\"locationChange\", this.locationChange);\n    EventService.$off(\"reloadCustomerChatList\", this.reloadCustomerChatList);\n    EventService.$off(\n      \"setActiveCustomerAsUnresolved\",\n      this.setActiveCustomerAsUnresolved\n    );\n  },\n  methods: {\n    getUser() {\n      var vm = this;\n      UserService.getUserRole(vm.locationId).then(\n        function(response) {\n          vm.userRole = response.role;\n        },\n        function(error) {\n          console.log(error);\n        }\n      );\n    },\n    selectChat(c) {\n      try {\n        localStorage.setItem(\"customer\", JSON.stringify(c));\n      } catch (error) {\n        console.log(error);\n      }\n      this.$router.push({ path: \"/customerDetails\" });\n    },\n    exportCustomer() {\n      EventService.$emit(\"loading\", \"show\");\n      var vm = this;\n      CustomerService.getAllCustomers(this.locationSelected).then(response => {\n        var exportableCustomer = response;\n        EventService.$emit(\"loading\", \"hide\");\n        vm.downloadCustomer(exportableCustomer);\n      });\n    },\n    displayCustomerInfo(customer) {\n      if (customer.firstName || customer.lastName) {\n        return customer.firstName + \" \" + customer.lastName;\n      } else if (customer.phone) {\n        return customer.phone;\n      } else if (customer.email) {\n        return customer.email;\n      } else {\n        return \"Unknown Customer\";\n      }\n    },\n    downloadCustomer(data) {\n      let vm = this;\n      LocationService.getLocation(vm.locationSelected).then(response => {\n        vm.locationName = response.name;\n        EventService.$emit(\"loading\", \"show\");\n        var csvDownload = Papa.unparse(data.results);\n        var MIME_TYPE = \"text/csv\";\n        var blob = new Blob([csvDownload], { type: MIME_TYPE });\n        var csvURL = window.URL.createObjectURL(blob);\n        var tempLink = document.createElement(\"a\");\n        tempLink.href = csvURL;\n        tempLink.setAttribute(\n          \"download\",\n          `${vm.locationName} Customer Report.csv`\n        );\n        document.body.appendChild(tempLink);\n        tempLink.click();\n        EventService.$emit(\"loading\", \"hide\");\n        csvDownload = {};\n        try {\n          document.body.removeChild(tempLink);\n        } catch (e) {}\n      });\n    },\n    checkForAdmin() {\n      var vm = this;\n      UserService.getCurrentUser().then(response => {\n        vm.isSuperAdmin = response.isSuperAdmin;\n        vm.userId = response.userId;\n        if (!vm.isSuperAdmin) vm.changeSelected(\"all\");\n      });\n    },\n    displayDate(millis) {\n      var date = new Date(millis);\n      return (\n        1 +\n        date.getMonth() +\n        \"/\" +\n        date.getDate() +\n        \"/\" +\n        (date.getFullYear() % 100)\n      );\n    },\n    selectAll() {\n      this.customers.map((e, i) => {\n        this.prepForDelete(e);\n      });\n    },\n    locationChange() {\n      this.locationSelected = localStorage.getItem(\"locationId\");\n      this.deleteList = [];\n      this.searchCustomers();\n    },\n    getLocationQs() {\n      let vm = this;\n      if (vm.locationSelected) {\n        LocationService.getLocation(vm.locationSelected).then(response => {\n          vm.selectedLocationQs = response.qsEnabled;\n          vm.templateOptions = response.questionTemplate;\n        });\n      }\n    },\n    getLocationCustomerTags() {\n      let vm = this;\n      let searchObject = {};\n      let locationIdArray = [];\n      let locationId = localStorage.getItem('locationId');\n      if(locationId) {\n        locationIdArray.push(locationId);\n      } else {\n        let locOptions = JSON.parse(localStorage.getItem('locationOptions'));\n        locOptions.map(el => locationIdArray.push(el.locationId));\n      }\n      searchObject.locations = locationIdArray;\n      LocationService.getAvailableCustomerTags(searchObject).then(response => {\n        vm.customerTags = response.tags;\n      })\n    },\n    massResolveCustomerInteract() {\n      if (window.confirm(\"Are you sure you want to Mark these as Resolved?\")) {\n        var vm = this;\n        let newInteraction = \"resolve\";\n        this.deleteList.map((e, i) => {\n          CustomerService.addCustomerEngagementLog(\n            e.customerId,\n            \"Interaction marked as closed\"\n          ).then(response => {\n            if (response.success) {\n              vm.searchCustomers();\n            }\n          });\n        });\n      }\n    },\n    handleSort(data) {\n      let vm = this;\n      let direction = '-';\n      if(vm.sortType[0] == '-') {\n        direction = ''\n      }\n      vm.sortType = direction + data.prop;      \n      vm.searchCustomers();\n    },\n    searchCustomers(pageNum) {\n      EventService.$emit(\"loading\", \"show\");\n      this.moreCustomersToLoad = false;\n      this.customers = [];\n      this.totalResults = 0;\n      this.totalUnread = 0;\n      this.deleteList = [];\n      this.allS = false;\n      var vm = this;\n      vm.showFilters = false;\n      var searchObject = {};\n      if (this.searchText) searchObject.searchText = this.searchText.trim();\n      searchObject.resPerPage = this.paginationData.perPage;\n      if (this.sortType) {\n        if (this.sortType == \"name\") {\n          searchObject.sort = \"firstName\";\n        } else if (this.sortType == \"-name\") {\n          searchObject.sort = \"-firstName\";\n        } else if (this.sortType == \"date\") {\n          searchObject.sort = \"createdDate\";\n        } else if (this.sortType == \"-date\") {\n          searchObject.sort = \"-createdDate\";\n        } else {\n          searchObject.sort = this.sortType;\n        }\n      }\n\n      if (this.locationSelected) {\n        searchObject.locationId = this.locationSelected;\n      }\n\n      if (pageNum) {\n        searchObject.pageNum = pageNum;\n        vm.paginationData.currentPage = pageNum - 1;\n      } else {\n        searchObject.pageNum = 0;\n        this.paginationData.currentPage = 0;\n      }\n\n      var vm = this;\n      searchObject.filters = vm.filters;\n      // if(vm.selectedView == 'list') {\n      CustomerService.searchCustomersAdvanced(searchObject).then(\n        function(response) {\n          if(response[0].results) vm.customers = response[0].results;\n          if(response[0].count && response[0].count[0] && response[0].count[0].total) vm.paginationData.total = response[0].count[0].total;\n          \n          EventService.$emit(\"loading\", \"hide\");\n        },\n        function(error) {\n          console.log(error);\n          EventService.$emit(\"loading\", \"hide\");\n        }\n      );\n    },\n    reloadCustomerChatList() {\n      this.totalResults = 0;\n      this.searchCustomers(0);\n    },\n    setPageNum(pageNum) {\n      this.selectedPage = pageNum;\n      this.searchCustomers(pageNum);\n    },\n    toggleSort(setSortType) {\n      if (this.sortType != setSortType) {\n        this.sortType = setSortType;\n      } else {\n        this.sortType = \"-\" + this.sortType;\n      }\n      this.searchCustomers(this.selectedPage);\n    },\n    editCustomer(customer) {\n      if (customer) {\n        this.selectedCustomer = customer;\n      } else {\n        this.selectedCustomer = null;\n      }\n      this.openCustomerModal = true;\n    },\n    massAddCustomer(event) {\n      EventService.$emit(\"loading\", \"show\");\n      if (event.target.files[0]) {\n        \n        let filesList = event.target.files[0];\n        this.fileName = event.target.files[0].name;\n        let vm = this;\n        Papa.parse(filesList, {\n          complete: function(result) {\n            EventService.$emit(\"loading\", \"hide\");\n            vm.rawData = result.data;\n            vm.previewModal();\n          },\n          error: function(error) {\n            EventService.$emit(\"loading\", \"hide\");\n            EventService.$emit(\n              \"errorMessage\",\n              \"Sorry, something went wrong. Please try again.\"\n            );\n          }\n        });\n      }\n    },\n    selectCustomer(customer) {\n      this.selectedView = 'chat';\n      this.selectedCustomer = customer;\n      this.showCustomerDetail = true;\n      this.searchCustomers();\n      // this.searchText = customer.firstName + ' ' + customer.lastName;\n    },\n    deleteCustomer(customer) {\n      var vm = this;\n      if (window.confirm(\"Are you sure you want to delete this customer?\")) {\n        CustomerService.deleteCustomer(customer.customerId).then(\n          function(response) {\n            vm.closeCustomerChat();\n            vm.searchText = \"\";\n            vm.searchCustomers();\n          },\n          function(error) {\n            console.log(error);\n          }\n        );\n      }\n    },\n    closeCustomerDetails() {\n      let vm = this;\n      vm.selectedCustomer = '';\n      vm.showCustomerDetail = false\n      vm.searchCustomers();\n    },\n    handleSelectionChange(customers) {      \n      this.deleteList = customers;\n    },\n    displayOptions() {\n      this.displayButtons = !this.displayButtons;\n    },\n    prepForDelete(customer) {\n      this.locationSelected = localStorage.getItem(\"locationId\");\n      if (!this.deleteList.includes(customer)) {\n        this.deleteList.push(customer);\n      } else {\n        this.deleteList = this.deleteList.filter(data => {\n          return data !== customer;\n        });\n      }\n    },\n    massChangeStatus(status) {\n      let message = 'Are you sure you want to change these statuses?'\n      if(status == 'deleted') {\n        message = 'Are you certain you want to delete these customers?'\n      }\n      this.$confirm( message, 'Confirmation', {\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'Cancel',\n        type: \"error\"\n      }).then(() => {\n        var vm = this;\n        let newCustomerStatus = \"\";\n        this.deleteList.map((e, i) => {\n          newCustomerStatus = status;\n          CustomerService.setCustomerStatus(\n            e.customerId,\n            newCustomerStatus\n          ).then(response => {\n            if(response) {\n              EventService.$emit('successMessage', 'Status changed successfully!')\n              vm.searchCustomers();              \n            } else {\n              EventService.$emit('errorMessage', 'Something went wrong, please try again.')\n            }\n          });\n        });\n        this.displayButtons = false;\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: \"Delete Cancelled\"\n        })\n      })\n    },\n    openTagsMenu() {\n      this.showTagsMenu = true;\n    },\n    closeTagsMenu() {\n      this.showTagsMenu = false;\n      this.showFilters = false;\n    },\n    addTagToList() {\n      let vm = this;\n      let newTag = vm.newTag.trim();\n      if(newTag) {\n        vm.tagsToAdd.push(newTag);\n        vm.newTag = '';\n        newTag = '';\n      } else {\n        EventService.$emit('warningMessage', 'Tags cannot be blank!')        \n      }\n    },\n    removeTagFromList(index) {\n      let vm = this;\n      vm.tagsToAdd.splice(index,1);\n    },\n    addTags() {\n      var vm = this;\n      this.deleteList.map((e, i) => {\n        this.tagsToAdd.map(h => {\n          CustomerService.addTagToCustomer(h, e.customerId).then(response => {\n            vm.searchCustomers();\n          });\n        })\n      });\n      document.getElementsByClassName('card-title')[0].click();\n      this.closeTagsMenu();\n    },\n    discardTags() {\n      let vm = this;\n      vm.tagsToAdd = [];\n      vm.closeTagsMenu();\n    },\n    massRequestReview() {\n      this.requestModal = true;\n    },\n    massDelete() {\n      if (window.confirm(\"Are you sure you want to delete these customers?\")) {\n        var vm = this;\n        this.deleteList.map((e, i) => {\n          CustomerService.deleteCustomer(e.customerId).then(response => {\n            vm.searchCustomers();\n          });\n        });\n        this.displayButtons = false;\n      }\n    },\n    parseDate(date) {\n      let newDate = new Date(date);\n      let dateString = (newDate.getMonth()+1) + newDate.toString().substr(7,8);\n      let formattedDateString = dateString.replace(/\\s/g, '/');\n      return formattedDateString;\n    },\n    setCustomerStatus(customer, status) {\n      let vm = this;\n      CustomerService.setCustomerStatus(customer.customerId, status).then(\n        response => {\n          vm.searchCustomers();\n        }\n      );\n    },\n    closeReRequestModal() {\n      this.requestAgain = false;\n    },\n    reRequestReview(single) {\n      if (single) {\n        this.requestAgain = true;\n      } else {\n        if (\n          window.confirm(\n            \"Please confirm you would like to ask these customers for a review again.\"\n          )\n        ) {\n          let locationId = localStorage.getItem(\"locationId\");\n          let vm = this;\n          vm.requestAgain = true;\n          // Below is old code for automatic re-requesting if no Qs are enabled.\n          // if(vm.selectedLocationQs && vm.selectedLocationQs == true) {\n          //   vm.requestAgain = true;\n          // }\n          // else {\n          //   CustomerService.reRequest(locationId, vm.deleteList).then( response => {\n          //   if (response.success == true) {\n          //     EventService.$emit(\"loading\", \"hide\");\n          //     EventService.$emit(\"successMessage\", \"Hooray! Reviews Requested.\");\n          //   } else {\n          //     EventService.$emit(\"loading\", \"hide\");\n          //     EventService.$emit(\n          //       \"errorMessage\",\n          //       \"Sorry, something went wrong. Please try again.\"\n          //     );\n          //   }\n          //   })\n          // }\n        }\n      }\n    },\n    canActionCustomer(action, customer) {\n      return true;\n    },\n    previewModal() {\n      this.previewCSV = true;\n    },\n    resetFilters() {\n      this.filters = {\n        ratings: [],\n        status: [],\n        tags: []\n      }\n    },\n    formatFullDate(date) {\n      let messageDate = new Date(date)\n        .toString()\n        .substr(4, 20)\n        .trim();\n      return messageDate;\n    },\n    formatDate(date) {\n      let messageDate = new Date(date).toLocaleTimeString();\n      let lastColonPos = messageDate.lastIndexOf(\":\");\n      messageDate =\n        messageDate.substring(0, lastColonPos) +\n        messageDate.substring(lastColonPos + 3);\n      if (Date.now() - date > 1000 * 60 * 60 * 24) {\n        messageDate = new Date(date)\n          .toString()\n          .substr(4, 6)\n          .trim();\n      }\n      return messageDate;\n    },\n    getLastMessageText(logs) {\n      let lastMessageText = \"\";\n      for (var i = 0; i < logs.length && lastMessageText == \"\"; i++) {\n        if (logs[i].text) {\n          lastMessageText = logs[i].text;\n        }\n      }\n      return lastMessageText;\n    },\n    changeSelected(type) {\n      let vm = this;\n      vm.selectedType = !vm.selectedType;\n      vm.selected = type;\n      vm.searchCustomers();\n    },\n    toggleNote() {\n      this.addingNote = !this.addingNote;\n      this.newNote = \"\";\n      if (this.addingNote) {\n        this.$nextTick(() => this.$refs.noteInput.focus());\n      }\n    },\n    saveNote() {\n      let vm = this;\n      if (vm.newNote) {\n        let note = vm.newNote;\n        this.deleteList.map((e, i) => {\n          CustomerService.addCustomerNote(e.customerId, vm.newNote).then(\n            res => {\n              if (res) {\n                vm.newNote = \"\";\n                vm.displayNotes = !vm.displayNotes;\n                vm.searchCustomers();\n              }\n            }\n          );\n        });\n      }\n    },\n    saveTag() {\n      let vm = this;\n      if (vm.newTag) {\n        let tag = vm.newTag;\n        this.deleteList.map((e, i) => {\n          CustomerService.addTagToCustomer(vm.newTag, e.customerId).then(\n            res => {\n              if (res) {\n                vm.newTag = \"\";\n                vm.displayTags = !vm.displayTags;\n                vm.searchCustomers();\n              }\n            }\n          );\n        });\n      }\n    },\n    closeCustomerChat() {\n      this.selectedCustomer = null;\n      this.showCustomerChat = false;\n    },\n    cancelNote() {\n      this.displayNoteModal = false;\n    },\n    closeNoteModal(newNote) {\n      // Add note to notes array on the backend.\n      let vm = this;\n      CustomerService.addCustomerNote(\n        vm.selectedCustomer.customerId,\n        newNote\n      ).then(res => {\n        if (res) {\n          this.selectedCustomerNotes.push(newNote);\n        } else {\n          console.log(\"An error has occurred.\");\n        }\n      });\n      this.displayNoteModal = false;\n    },\n    setActiveCustomer(customer) {\n      let vm = this;\n      setTimeout(() => {\n        vm.searchText = customer.email || customer.phone;\n        vm.selectCustomerChat(customer);\n      }, 1000);\n    },\n    setActiveCustomerAsUnresolved() {\n      if (this.selectedCustomer) {\n        this.selectedCustomer.resolved - false;\n      }\n    },\n    closeTagMenu() {\n      let children = this.$children;\n      if (children && children.length > 1) {\n        if (this.$children[0].closeMenu) {\n          this.$children[0].closeMenu();\n        } else if (this.$children[1].closeMenu) {\n          this.$children[1].closeMenu();\n        }\n      }\n    },\n    displayinteractions(log) {\n      if (log.length > 0) {\n        // let j = JSON.parse(log[log.length - 1]);\n        // return log[log.length - 1];\n        var lo = log[log.length - 1];\n        var type = lo.type;\n        let interaction = type.substr(0, 15);\n        return interaction + \"....\";\n      }\n    },\n    closeCustomerModal() {\n      this.selectedCustomer = null;\n      this.openCustomerModal = false;\n      this.openCustomerDetailModal = false;\n      this.showCustomerChat = false;\n      this.previewCSV = false;\n      this.rawData = [];\n      this.deleteList = [];\n      this.requestAgain = false;\n      this.$refs.csvInput.value = null;\n      EventService.$emit(\"loading\", \"hide\");\n      //this.searchCustomers();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.el-popper {\n  margin-right: 125px;\n}\n\n.input-group-change {\n  position: relative;\n  z-index: 9999;\n  /* display: flex;\n    flex-direction: row; */\n  margin-top: 10px;\n}\n\n.input-group-addon {\n  border-right: none;\n  background-color: #f2f2f2;\n  color: #757575;\n  font-size: 16px;\n}\n.input-group-field {\n  background-color: #fafafa;\n  border: none !important;\n}\n.customer-controls-add {\n  float: left;\n  padding: 10px 10px 0 0;\n  cursor: pointer;\n  font-weight: normal;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #4fcbc5;\n}\n\n.customer-controls-add span {\n  font-size: 12px;\n  margin-top: 4px;\n  color: #545454;\n}\n\n.customer-controls-add i {\n  font-size: 16pt;\n}\n\n.customer-controls-add input {\n  display: none;\n}\n\n.dropdown-item {\n  margin: 10px 20px;\n  color: #9a9a9a;\n}\n\n.el-link.el-link--default {\n  justify-content: flex-start;\n}\n\n.input-group-addon .dropdown-toggle::after {\n  border: none;\n}\n.resolvedRow {\n  background-color: #f2f6f9 !important;\n}\n.unResolvedRow {\n  font-weight: bold;\n  color: #212120;\n}\n\n.customer-mass-actions-menu {\n  display: flex;\n  flex-direction: column;\n}\n\n.per-page-select {\n  max-width: 80px;\n}\n\n.darkened {\n  background: #9a9a9a;\n  color: white;\n}\n\n.fa-caret-down {\n  margin-left: 10px;\n\n}\n\n.tags-menu {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, .25);\n  padding: 10px 20px;  \n  max-width: 200px;\n}\n\n.tags-menu-buttons {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 5px;\n}\n\n.tags-container {\n  width: 100%;\n  overflow: hidden;\n}\n\n.filter-button {\n  width: 60px;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n</style>\n"]}]}