{"remainingRequest":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-select/src/components/Select.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-select/src/components/Select.vue","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Select.vue"],"names":[],"mappingsfile":"Select.vue","sourceRoot":"node_modules/vue-select/src/components","sourcesContent":["<style>\n  .v-select {\n    position: relative;\n    font-family: inherit;\n  }\n  .v-select,\n  .v-select * {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n  }\n\n  /* Rtl support - Because we're using a flexbox-based layout, the `dir=\"rtl\"` HTML\n     attribute does most of the work for us by rearranging the child elements visually.\n   */\n  .v-select[dir=\"rtl\"] .vs__actions {\n    padding: 0 3px 0 6px;\n  }\n  .v-select[dir=\"rtl\"] .dropdown-toggle .clear {\n    margin-left: 6px;\n    margin-right: 0;\n  }\n  .v-select[dir=\"rtl\"] .selected-tag .close {\n    margin-left: 0;\n    margin-right: 2px;\n  }\n  .v-select[dir=\"rtl\"] .dropdown-menu {\n    text-align: right;\n  }\n\n  /* Open Indicator */\n  .v-select .open-indicator {\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    pointer-events: all;\n    transition: all 150ms cubic-bezier(1.000, -0.115, 0.975, 0.855);\n    transition-timing-function: cubic-bezier(1.000, -0.115, 0.975, 0.855);\n    opacity: 1;\n    width: 12px; /* To account for extra width from rotating. */\n  }\n  .v-select .open-indicator:before {\n    border-color: rgba(60, 60, 60, .5);\n    border-style: solid;\n    border-width: 3px 3px 0 0;\n    content: '';\n    display: inline-block;\n    height: 10px;\n    width: 10px;\n    vertical-align: text-top;\n    transform: rotate(133deg);\n    transition: all 150ms cubic-bezier(1.000, -0.115, 0.975, 0.855);\n    transition-timing-function: cubic-bezier(1.000, -0.115, 0.975, 0.855);\n    box-sizing: inherit;\n  }\n  /* Open Indicator States */\n  .v-select.open .open-indicator:before {\n    transform: rotate(315deg);\n  }\n  .v-select.loading .open-indicator {\n    opacity: 0;\n  }\n\n  /* Dropdown Toggle */\n  .v-select .dropdown-toggle {\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    display: flex;\n    padding: 0 0 4px 0;\n    background: none;\n    border: 1px solid rgba(60, 60, 60, .26);\n    border-radius: 4px;\n    white-space: normal;\n  }\n  .v-select .dropdown-toggle::after {\n    display: none;\n  }\n  .v-select .vs__selected-options {\n    display: flex;\n    flex-basis: 100%;\n    flex-grow: 1;\n    flex-wrap: wrap;\n    padding: 0 2px;\n    position: relative;\n  }\n  .v-select .vs__actions {\n    display: flex;\n    align-items: stretch;\n    padding: 0 6px 0 3px;\n  }\n\n  /* Clear Button */\n  .v-select .dropdown-toggle .clear {\n    font-size: 23px;\n    font-weight: 700;\n    line-height: 1;\n    color: rgba(60, 60, 60, 0.5);\n    padding: 0;\n    border: 0;\n    background-color: transparent;\n    cursor: pointer;\n    margin-right: 6px;\n  }\n\n  /* Dropdown Toggle States */\n  .v-select.searchable .dropdown-toggle {\n    cursor: text;\n  }\n  .v-select.unsearchable .dropdown-toggle {\n    cursor: pointer;\n  }\n  .v-select.open .dropdown-toggle {\n    border-bottom-color: transparent;\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n  /* Dropdown Menu */\n  .v-select .dropdown-menu {\n    display:block;\n    position: absolute;\n    top: 100%;\n    left: 0;\n    z-index: 1000;\n    min-width: 160px;\n    padding: 5px 0;\n    margin: 0;\n    width: 100%;\n    overflow-y: auto;\n    border: 1px solid rgba(0, 0, 0, .26);\n    box-shadow: 0px 3px 6px 0px rgba(0,0,0,.15);\n    border-top: none;\n    border-radius: 0 0 4px 4px;\n    text-align: left;\n    list-style: none;\n    background: #fff;\n  }\n  .v-select .no-options {\n    text-align: center;\n  }\n  /* Selected Tags */\n  .v-select .selected-tag {\n    display: flex;\n    align-items: center;\n    background-color: #f0f0f0;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    color: #333;\n    line-height: 1.42857143; /* Normalize line height */\n    margin: 4px 2px 0px 2px;\n    padding: 0 0.25em;\n    transition: opacity .25s;\n  }\n  .v-select.single .selected-tag {\n    background-color: transparent;\n    border-color: transparent;\n  }\n  .v-select.single.open .selected-tag {\n    position: absolute;\n    opacity: .4;\n  }\n  .v-select.single.searching .selected-tag {\n    display: none;\n  }\n  .v-select .selected-tag .close {\n    margin-left: 2px;\n    font-size: 1.25em;\n    appearance: none;\n    padding: 0;\n    cursor: pointer;\n    background: 0 0;\n    border: 0;\n    font-weight: 700;\n    line-height: 1;\n    color: #000;\n    text-shadow: 0 1px 0 #fff;\n    filter: alpha(opacity=20);\n    opacity: .2;\n  }\n  .v-select.single.searching:not(.open):not(.loading) input[type=\"search\"] {\n    opacity: .2;\n  }\n  /* Search Input */\n  .v-select input[type=\"search\"]::-webkit-search-decoration,\n  .v-select input[type=\"search\"]::-webkit-search-cancel-button,\n  .v-select input[type=\"search\"]::-webkit-search-results-button,\n  .v-select input[type=\"search\"]::-webkit-search-results-decoration {\n    display: none;\n  }\n  .v-select input[type=\"search\"]::-ms-clear {\n    display: none;\n  }\n  .v-select input[type=\"search\"],\n  .v-select input[type=\"search\"]:focus {\n    appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    line-height: 1.42857143;\n    font-size: 1em;\n    display: inline-block;\n    border: 1px solid transparent;\n    border-left: none;\n    outline: none;\n    margin: 4px 0 0 0;\n    padding: 0 7px;\n    max-width: 100%;\n    background: none;\n    box-shadow: none;\n    flex-grow: 1;\n    width: 0;\n    height: inherit;\n  }\n  .v-select.unsearchable input[type=\"search\"] {\n    opacity: 1;\n  }\n  .v-select.unsearchable input[type=\"search\"]:hover {\n    cursor: pointer;\n  }\n\n  /* List Items */\n  .v-select li {\n    line-height: 1.42857143; /* Normalize line height */\n  }\n  .v-select li > a {\n    display: block;\n    padding: 3px 20px;\n    clear: both;\n    color: #333; /* Overrides most CSS frameworks */\n    white-space: nowrap;\n  }\n  .v-select li:hover {\n    cursor: pointer;\n  }\n  .v-select .dropdown-menu .active > a {\n    color: #333;\n    background: rgba(50, 50, 50, .1);\n  }\n  .v-select .dropdown-menu > .highlight > a {\n    /*\n     * required to override bootstrap 3's\n     * .dropdown-menu > li > a:hover {} styles\n     */\n    background: #5897fb;\n    color: #fff;\n  }\n  .v-select .highlight:not(:last-child) {\n    margin-bottom: 0; /* Fixes Bulma Margin */\n  }\n  /* Loading Spinner */\n  .v-select .spinner {\n    align-self: center;\n    opacity: 0;\n    font-size: 5px;\n    text-indent: -9999em;\n    overflow: hidden;\n    border-top: .9em solid rgba(100, 100, 100, .1);\n    border-right: .9em solid rgba(100, 100, 100, .1);\n    border-bottom: .9em solid rgba(100, 100, 100, .1);\n    border-left: .9em solid rgba(60, 60, 60, .45);\n    transform: translateZ(0);\n    animation: vSelectSpinner 1.1s infinite linear;\n    transition: opacity .1s;\n  }\n  .v-select .spinner,\n  .v-select .spinner:after {\n    border-radius: 50%;\n    width: 5em;\n    height: 5em;\n  }\n\n  /* Disabled state */\n  .v-select.disabled .dropdown-toggle,\n  .v-select.disabled .dropdown-toggle .clear,\n  .v-select.disabled .dropdown-toggle input,\n  .v-select.disabled .selected-tag .close,\n  .v-select.disabled .open-indicator {\n    cursor: not-allowed;\n    background-color: rgb(248, 248, 248);\n  }\n\n  /* Loading Spinner States */\n  .v-select.loading .spinner {\n    opacity: 1;\n  }\n  /* KeyFrames */\n  @-webkit-keyframes vSelectSpinner {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes vSelectSpinner {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  /* Dropdown Default Transition */\n  .fade-enter-active,\n  .fade-leave-active {\n    transition: opacity .15s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n  }\n  .fade-enter,\n  .fade-leave-to {\n    opacity: 0;\n  }\n</style>\n\n<template>\n  <div :dir=\"dir\" class=\"dropdown v-select\" :class=\"dropdownClasses\">\n    <div ref=\"toggle\" @mousedown.prevent=\"toggleDropdown\" class=\"dropdown-toggle\">\n\n      <div class=\"vs__selected-options\" ref=\"selectedOptions\">\n        <slot v-for=\"option in valueAsArray\" name=\"selected-option-container\"\n              :option=\"(typeof option === 'object')?option:{[label]: option}\" :deselect=\"deselect\" :multiple=\"multiple\" :disabled=\"disabled\">\n          <span class=\"selected-tag\" v-bind:key=\"option.index\">\n            <slot name=\"selected-option\" v-bind=\"(typeof option === 'object')?option:{[label]: option}\">\n              {{ getOptionLabel(option) }}\n            </slot>\n            <button v-if=\"multiple\" :disabled=\"disabled\" @click=\"deselect(option)\" type=\"button\" class=\"close\" aria-label=\"Remove option\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </span>\n        </slot>\n\n        <input\n                ref=\"search\"\n                :value=\"search\"\n                @keydown.delete=\"maybeDeleteValue\"\n                @keyup.esc=\"onEscape\"\n                @keydown.up.prevent=\"typeAheadUp\"\n                @keydown.down.prevent=\"typeAheadDown\"\n                @keydown.enter.prevent=\"typeAheadSelect\"\n                @keydown.tab=\"onTab\"\n                @blur=\"onSearchBlur\"\n                @focus=\"onSearchFocus\"\n                @input=\"search = $event.target.value\"\n                type=\"search\"\n                class=\"form-control\"\n                :autocomplete=\"autocomplete\"\n                :disabled=\"disabled\"\n                :placeholder=\"searchPlaceholder\"\n                :tabindex=\"tabindex\"\n                :readonly=\"!searchable\"\n                :id=\"inputId\"\n                role=\"combobox\"\n                :aria-expanded=\"dropdownOpen\"\n                aria-label=\"Search for option\"\n        >\n\n      </div>\n      <div class=\"vs__actions\">\n        <button\n          v-show=\"showClearButton\"\n          :disabled=\"disabled\"\n          @click=\"clearSelection\"\n          type=\"button\"\n          class=\"clear\"\n          title=\"Clear selection\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n\n        <i v-if=\"!noDrop\" ref=\"openIndicator\" role=\"presentation\" class=\"open-indicator\"></i>\n\n        <slot name=\"spinner\">\n          <div class=\"spinner\" v-show=\"mutableLoading\">Loading...</div>\n        </slot>\n      </div>\n    </div>\n\n    <transition :name=\"transition\">\n      <ul ref=\"dropdownMenu\" v-if=\"dropdownOpen\" class=\"dropdown-menu\" :style=\"{ 'max-height': maxHeight }\" role=\"listbox\" @mousedown=\"onMousedown\" @mouseup=\"onMouseup\">\n        <li role=\"option\" v-for=\"(option, index) in filteredOptions\" v-bind:key=\"index\" :class=\"{ active: isOptionSelected(option), highlight: index === typeAheadPointer }\" @mouseover=\"typeAheadPointer = index\">\n          <a @mousedown.prevent.stop=\"select(option)\">\n          <slot name=\"option\" v-bind=\"(typeof option === 'object')?option:{[label]: option}\">\n            {{ getOptionLabel(option) }}\n          </slot>\n          </a>\n        </li>\n        <li v-if=\"!filteredOptions.length\" class=\"no-options\" @mousedown.stop=\"\">\n          <slot name=\"no-options\">Sorry, no matching options.</slot>\n        </li>\n      </ul>\n    </transition>\n  </div>\n</template>\n\n<script type=\"text/babel\">\n  import pointerScroll from '../mixins/pointerScroll'\n  import typeAheadPointer from '../mixins/typeAheadPointer'\n  import ajax from '../mixins/ajax'\n\n  export default {\n    mixins: [pointerScroll, typeAheadPointer, ajax],\n\n    props: {\n      /**\n       * Contains the currently selected value. Very similar to a\n       * `value` attribute on an <input>. You can listen for changes\n       * using 'change' event using v-on\n       * @type {Object||String||null}\n       */\n      value: {\n        default: null\n      },\n\n      /**\n       * An array of strings or objects to be used as dropdown choices.\n       * If you are using an array of objects, vue-select will look for\n       * a `label` key (ex. [{label: 'This is Foo', value: 'foo'}]). A\n       * custom label key can be set with the `label` prop.\n       * @type {Array}\n       */\n      options: {\n        type: Array,\n        default() {\n          return []\n        },\n      },\n\n      /**\n       * Disable the entire component.\n       * @type {Boolean}\n       */\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n\n      /**\n       * Can the user clear the selected property.\n       * @type {Boolean}\n       */\n      clearable: {\n        type: Boolean,\n        default: true\n      },\n\n      /**\n       * Sets the max-height property on the dropdown list.\n       * @deprecated\n       * @type {String}\n       */\n      maxHeight: {\n        type: String,\n        default: '400px'\n      },\n\n      /**\n       * Enable/disable filtering the options.\n       * @type {Boolean}\n       */\n      searchable: {\n        type: Boolean,\n        default: true\n      },\n\n      /**\n       * Equivalent to the `multiple` attribute on a `<select>` input.\n       * @type {Boolean}\n       */\n      multiple: {\n        type: Boolean,\n        default: false\n      },\n\n      /**\n       * Equivalent to the `placeholder` attribute on an `<input>`.\n       * @type {String}\n       */\n      placeholder: {\n        type: String,\n        default: ''\n      },\n\n      /**\n       * Sets a Vue transition property on the `.dropdown-menu`. vue-select\n       * does not include CSS for transitions, you'll need to add them yourself.\n       * @type {String}\n       */\n      transition: {\n        type: String,\n        default: 'fade'\n      },\n\n      /**\n       * Enables/disables clearing the search text when an option is selected.\n       * @type {Boolean}\n       */\n      clearSearchOnSelect: {\n        type: Boolean,\n        default: true\n      },\n\n      /**\n       * Close a dropdown when an option is chosen. Set to false to keep the dropdown\n       * open (useful when combined with multi-select, for example)\n       * @type {Boolean}\n       */\n      closeOnSelect: {\n        type: Boolean,\n        default: true\n      },\n\n      /**\n       * Tells vue-select what key to use when generating option\n       * labels when each `option` is an object.\n       * @type {String}\n       */\n      label: {\n        type: String,\n        default: 'label'\n      },\n\n\n      /**\n       * Value of the 'autocomplete' field of the input\n       * element.\n       * @type {String}\n       */\n      autocomplete: {\n        type: String,\n        default: 'off'\n      },\n\n      /**\n       * Tells vue-select what key to use when generating option\n       * values when each `option` is an object.\n       * @type {String}\n       */\n      index: {\n        type: String,\n        default: null\n      },\n\n      /**\n       * Callback to generate the label text. If {option}\n       * is an object, returns option[this.label] by default.\n       *\n       * Label text is used for filtering comparison and\n       * displaying. If you only need to adjust the\n       * display, you should use the `option` and\n       * `selected-option` slots.\n       *\n       * @type {Function}\n       * @param  {Object || String} option\n       * @return {String}\n       */\n      getOptionLabel: {\n        type: Function,\n        default(option) {\n          if( this.index ) {\n            option = this.findOptionByIndexValue(option)\n          }\n\n          if (typeof option === 'object') {\n            if (!option.hasOwnProperty(this.label)) {\n              return console.warn(\n                `[vue-select warn]: Label key \"option.${this.label}\" does not` +\n                ` exist in options object ${JSON.stringify(option)}.\\n` +\n                'http://sagalbot.github.io/vue-select/#ex-labels'\n              )\n            }\n            return option[this.label]\n          }\n          return option;\n        }\n      },\n\n      /**\n       * An optional callback function that is called each time the selected\n       * value(s) change. When integrating with Vuex, use this callback to trigger\n       * an action, rather than using :value.sync to retreive the selected value.\n       * @type {Function}\n       * @param {Object || String} val\n       */\n      onChange: {\n        type: Function,\n        default: function (val) {\n          this.$emit('change', val);\n        }\n      },\n\n      onInput: {\n        type: Function,\n        default: function (val) {\n          this.$emit('input', val);\n        }\n      },\n\n      /**\n       * Select the current value if selectOnTab is enabled\n       */\n      onTab: {\n        type: Function,\n        default: function () {\n          if (this.selectOnTab) {\n            this.typeAheadSelect();\n          }\n        },\n      },\n\n      /**\n       * Enable/disable creating options from searchInput.\n       * @type {Boolean}\n       */\n      taggable: {\n        type: Boolean,\n        default: false\n      },\n\n      /**\n       * Set the tabindex for the input field.\n       * @type {Number}\n       */\n      tabindex: {\n        type: Number,\n        default: null\n      },\n\n      /**\n       * When true, newly created tags will be added to\n       * the options list.\n       * @type {Boolean}\n       */\n      pushTags: {\n        type: Boolean,\n        default: false\n      },\n\n      /**\n       * When true, existing options will be filtered\n       * by the search text. Should not be used in conjunction\n       * with taggable.\n       * @type {Boolean}\n       */\n      filterable: {\n        type: Boolean,\n        default: true\n      },\n\n      /**\n       * Callback to determine if the provided option should\n       * match the current search text. Used to determine\n       * if the option should be displayed.\n       * @type   {Function}\n       * @param  {Object || String} option\n       * @param  {String} label\n       * @param  {String} search\n       * @return {Boolean}\n       */\n      filterBy: {\n        type: Function,\n        default(option, label, search) {\n          return (label || '').toLowerCase().indexOf(search.toLowerCase()) > -1\n        }\n      },\n\n      /**\n       * Callback to filter results when search text\n       * is provided. Default implementation loops\n       * each option, and returns the result of\n       * this.filterBy.\n       * @type   {Function}\n       * @param  {Array} list of options\n       * @param  {String} search text\n       * @param  {Object} vSelect instance\n       * @return {Boolean}\n       */\n      filter: {\n        \"type\": Function,\n        default(options, search) {\n          return options.filter((option) => {\n            let label = this.getOptionLabel(option)\n            if (typeof label === 'number') {\n              label = label.toString()\n            }\n            return this.filterBy(option, label, search)\n          });\n        }\n      },\n\n      /**\n       * User defined function for adding Options\n       * @type {Function}\n       */\n      createOption: {\n        type: Function,\n        default(newOption) {\n          if (typeof this.mutableOptions[0] === 'object') {\n            newOption = {[this.label]: newOption}\n          }\n          this.$emit('option:created', newOption)\n          return newOption\n        }\n      },\n\n      /**\n       * When false, updating the options will not reset the select value\n       * @type {Boolean}\n       */\n      resetOnOptionsChange: {\n        type: Boolean,\n        default: false\n      },\n\n      /**\n       * Disable the dropdown entirely.\n       * @type {Boolean}\n       */\n      noDrop: {\n        type: Boolean,\n        default: false\n      },\n\n      /**\n       * Sets the id of the input element.\n       * @type {String}\n       * @default {null}\n       */\n      inputId: {\n        type: String\n      },\n\n      /**\n       * Sets RTL support. Accepts 'ltr', 'rtl', 'auto'.\n       * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir\n       * @type {String}\n       * @default 'auto'\n       */\n      dir: {\n        type: String,\n        default: 'auto'\n      },\n      /**\n       * When true, hitting the 'tab' key will select the current select value\n       * @type {Boolean}\n       */\n      selectOnTab: {\n        type: Boolean,\n        default: false\n      }\n    },\n\n    data() {\n      return {\n        search: '',\n        open: false,\n        mutableValue: null,\n        mutableOptions: []\n      }\n    },\n\n    watch: {\n      /**\n       * When the value prop changes, update\n       * the internal mutableValue.\n       * @param  {mixed} val\n       * @return {void}\n       */\n      value(val) {\n        this.mutableValue = val\n      },\n\n      /**\n       * Maybe run the onChange callback.\n       * @param  {string|object} val\n       * @param  {string|object} old\n       * @return {void}\n       */\n      mutableValue(val, old) {\n        if (this.multiple) {\n          this.onChange ? this.onChange(val) : null\n        } else {\n          this.onChange && val !== old ? this.onChange(val) : null\n        }\n      },\n\n      /**\n       * When options change, update\n       * the internal mutableOptions.\n       * @param  {array} val\n       * @return {void}\n       */\n      options(val) {\n        this.mutableOptions = val\n      },\n\n      /**\n       * Maybe reset the mutableValue\n       * when mutableOptions change.\n       * @return {[type]} [description]\n       */\n      mutableOptions() {\n        if (!this.taggable && this.resetOnOptionsChange) {\n          this.mutableValue = this.multiple ? [] : null\n        }\n      },\n\n      /**\n       * Always reset the mutableValue when\n       * the multiple prop changes.\n       * @param  {Boolean} val\n       * @return {void}\n       */\n      multiple(val) {\n        this.mutableValue = val ? [] : null\n      }\n    },\n\n    /**\n     * Clone props into mutable values,\n     * attach any event listeners.\n     */\n    created() {\n      this.mutableValue = this.value\n      this.mutableOptions = this.options.slice(0)\n      this.mutableLoading = this.loading\n\n      this.$on('option:created', this.maybePushTag)\n    },\n\n    methods: {\n\n      /**\n       * Select a given option.\n       * @param  {Object|String} option\n       * @return {void}\n       */\n      select(option) {\n        if (!this.isOptionSelected(option)) {\n          if (this.taggable && !this.optionExists(option)) {\n            option = this.createOption(option)\n          }\n          if(this.index) {\n            if (!option.hasOwnProperty(this.index)) {\n              return console.warn(\n                  `[vue-select warn]: Index key \"option.${this.index}\" does not` +\n                  ` exist in options object ${JSON.stringify(option)}.`\n              )\n            }\n            option = option[this.index]\n          }\n          if (this.multiple && !this.mutableValue) {\n            this.mutableValue = [option]\n          } else if (this.multiple) {\n            this.mutableValue = [...this.mutableValue, option]\n          } else {\n            this.mutableValue = option\n          }\n          this.onInput(this.mutableValue);\n        }\n\n        this.onAfterSelect(option)\n      },\n\n      /**\n       * De-select a given option.\n       * @param  {Object|String} option\n       * @return {void}\n       */\n      deselect(option) {\n        if (this.multiple) {\n          let ref = -1\n          this.mutableValue.forEach((val) => {\n            if (val === option || (this.index && val === option[this.index]) || (typeof val === 'object' && val[this.label] === option[this.label])) {\n              ref = val\n            }\n          })\n          this.mutableValue = this.mutableValue.filter(entry => entry !== ref)\n        } else {\n          this.mutableValue = null\n        }\n        this.onInput(this.mutableValue);\n      },\n\n      /**\n       * Clears the currently selected value(s)\n       * @return {void}\n       */\n      clearSelection() {\n        this.mutableValue = this.multiple ? [] : null\n        this.onInput(this.mutableValue)\n      },\n\n      /**\n       * Called from this.select after each selection.\n       * @param  {Object|String} option\n       * @return {void}\n       */\n      onAfterSelect(option) {\n        if (this.closeOnSelect) {\n          this.open = !this.open\n          this.$refs.search.blur()\n        }\n\n        if (this.clearSearchOnSelect) {\n          this.search = ''\n        }\n      },\n\n      /**\n       * Toggle the visibility of the dropdown menu.\n       * @param  {Event} e\n       * @return {void}\n       */\n      toggleDropdown(e) {\n        if (e.target === this.$refs.openIndicator || e.target === this.$refs.search || e.target === this.$refs.toggle ||\n            e.target.classList.contains('selected-tag') || e.target === this.$el) {\n          if (this.open) {\n            this.$refs.search.blur() // dropdown will close on blur\n          } else {\n            if (!this.disabled) {\n              this.open = true\n              this.$refs.search.focus()\n            }\n          }\n        }\n      },\n\n      /**\n       * Check if the given option is currently selected.\n       * @param  {Object|String}  option\n       * @return {Boolean}        True when selected | False otherwise\n       */\n      isOptionSelected(option) {\n        return this.valueAsArray.some(value => {\n          if (typeof value === 'object') {\n            return this.optionObjectComparator(value, option)\n          }\n          return value === option || value === option[this.index]\n        })\n      },\n\n      /**\n       * Determine if two option objects are matching.\n       *\n       * @param value {Object}\n       * @param option {Object}\n       * @returns {boolean}\n       */\n      optionObjectComparator(value, option) {\n        if (this.index && value === option[this.index]) {\n          return true\n        } else if ((value[this.label] === option[this.label]) || (value[this.label] === option)) {\n          return true\n        } else if (this.index && value[this.index] === option[this.index]) {\n          return true\n        }\n        return false;\n      },\n\n      /**\n       * Finds an option from this.options\n       * where option[this.index] matches\n       * the passed in value.\n       *\n       * @param value {Object}\n       * @returns {*}\n       */\n      findOptionByIndexValue(value) {\n        this.options.forEach(_option => {\n          if (JSON.stringify(_option[this.index]) === JSON.stringify(value)) {\n            value = _option\n          }\n        })\n        return value\n      },\n\n      /**\n       * If there is any text in the search input, remove it.\n       * Otherwise, blur the search input to close the dropdown.\n       * @return {void}\n       */\n      onEscape() {\n        if (!this.search.length) {\n          this.$refs.search.blur()\n        } else {\n          this.search = ''\n        }\n      },\n\n      /**\n       * Close the dropdown on blur.\n       * @emits  {search:blur}\n       * @return {void}\n       */\n      onSearchBlur() {\n        if (this.mousedown && !this.searching) {\n          this.mousedown = false\n        } else {\n          if (this.clearSearchOnBlur) {\n            this.search = ''\n          }\n          this.closeSearchOptions()\n          return\n        }\n        // Fixed bug where no-options message could not be closed\n        if(this.search.length === 0 && this.options.length === 0){\n          this.closeSearchOptions()\n          return\n        }\n      },\n\n      /**\n       * 'Private' function to close the search options\n       * @emits  {search:blur}\n       * @returns {void}\n       */\n      closeSearchOptions(){\n        this.open = false\n        this.$emit('search:blur')\n      },\n\n      /**\n       * Open the dropdown on focus.\n       * @emits  {search:focus}\n       * @return {void}\n       */\n      onSearchFocus() {\n        this.open = true\n        this.$emit('search:focus')\n      },\n\n      /**\n       * Delete the value on Delete keypress when there is no\n       * text in the search input, & there's tags to delete\n       * @return {this.value}\n       */\n      maybeDeleteValue() {\n        if (!this.$refs.search.value.length && this.mutableValue && this.clearable) {\n          this.mutableValue = this.multiple ? this.mutableValue.slice(0, -1) : null\n        }\n      },\n\n      /**\n       * Determine if an option exists\n       * within this.mutableOptions array.\n       *\n       * @param  {Object || String} option\n       * @return {boolean}\n       */\n      optionExists(option) {\n        let exists = false\n\n        this.mutableOptions.forEach(opt => {\n          if (typeof opt === 'object' && opt[this.label] === option) {\n            exists = true\n          } else if (opt === option) {\n            exists = true\n          }\n        })\n\n        return exists\n      },\n\n      /**\n       * If push-tags is true, push the\n       * given option to mutableOptions.\n       *\n       * @param  {Object || String} option\n       * @return {void}\n       */\n      maybePushTag(option) {\n        if (this.pushTags) {\n          this.mutableOptions.push(option)\n        }\n      },\n\n      /**\n       * Event-Handler to help workaround IE11 (probably fixes 10 as well)\n       * firing a `blur` event when clicking\n       * the dropdown's scrollbar, causing it\n       * to collapse abruptly.\n       * @return {void}\n       */\n      onMousedown() {\n        this.mousedown = true\n      },\n\n      onMouseup() {\n        this.mousedown = false\n      }\n    },\n\n    computed: {\n\n      /**\n       * Classes to be output on .dropdown\n       * @return {Object}\n       */\n      dropdownClasses() {\n        return {\n          open: this.dropdownOpen,\n          single: !this.multiple,\n          searching: this.searching,\n          searchable: this.searchable,\n          unsearchable: !this.searchable,\n          loading: this.mutableLoading,\n          rtl: this.dir === 'rtl', // This can be removed - styling is handled by `dir=\"rtl\"` attribute\n          disabled: this.disabled\n        }\n      },\n\n      /**\n       * If search text should clear on blur\n       * @return {Boolean} True when single and clearSearchOnSelect\n       */\n      clearSearchOnBlur() {\n        return this.clearSearchOnSelect && !this.multiple\n      },\n\n      /**\n       * Return the current state of the\n       * search input\n       * @return {Boolean} True if non empty value\n       */\n      searching() {\n        return !!this.search\n      },\n\n      /**\n       * Return the current state of the\n       * dropdown menu.\n       * @return {Boolean} True if open\n       */\n      dropdownOpen() {\n        return this.noDrop ? false : this.open && !this.mutableLoading\n      },\n\n      /**\n       * Return the placeholder string if it's set\n       * & there is no value selected.\n       * @return {String} Placeholder text\n       */\n      searchPlaceholder() {\n        if (this.isValueEmpty && this.placeholder) {\n          return this.placeholder;\n        }\n      },\n\n      /**\n       * The currently displayed options, filtered\n       * by the search elements value. If tagging\n       * true, the search text will be prepended\n       * if it doesn't already exist.\n       *\n       * @return {array}\n       */\n      filteredOptions() {\n        if (!this.filterable && !this.taggable) {\n          return this.mutableOptions.slice()\n        }\n        let options = this.search.length ? this.filter(this.mutableOptions, this.search, this) : this.mutableOptions;\n        if (this.taggable && this.search.length && !this.optionExists(this.search)) {\n          options.unshift(this.search)\n        }\n        return options\n      },\n\n      /**\n       * Check if there aren't any options selected.\n       * @return {Boolean}\n       */\n      isValueEmpty() {\n        if (this.mutableValue) {\n          if (typeof this.mutableValue === 'object') {\n            return ! Object.keys(this.mutableValue).length\n          }\n          return ! this.valueAsArray.length\n        }\n\n        return true;\n      },\n\n      /**\n       * Return the current value in array format.\n       * @return {Array}\n       */\n      valueAsArray() {\n        if (this.multiple && this.mutableValue) {\n          return this.mutableValue\n        } else if (this.mutableValue) {\n          return [].concat(this.mutableValue)\n        }\n\n        return []\n      },\n\n      /**\n       * Determines if the clear button should be displayed.\n       * @return {Boolean}\n       */\n      showClearButton() {\n        return !this.multiple && this.clearable && !this.open && this.mutableValue != null\n      }\n    },\n\n  }\n</script>\n"]}]}