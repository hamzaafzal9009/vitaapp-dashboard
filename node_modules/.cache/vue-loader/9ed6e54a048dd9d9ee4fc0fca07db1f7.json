{"remainingRequest":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/src/components/ParsingRules.vue?vue&type=style&index=0&id=34bdd8d7&scoped=true&lang=css&","dependencies":[{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/src/components/ParsingRules.vue","mtime":1581270622000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnBhcnNpbmctY29udGFpbmVyIHsKICBtaW4taGVpZ2h0OiAxMDB2aDsKICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICBtaW4td2lkdGg6IDEwMCU7CiAgcGFkZGluZy1sZWZ0OiAxMHB4Owp9CgoucGFyc2luZy1kZXNjcmlwdGlvbiB7CiAgbWFyZ2luLWxlZnQ6IDMwcHg7Cn0KCi5kYXRhLWNvbnRhaW5lciB7CiAgYm9yZGVyOiAxcHggc29saWQgZ3JleTsKICBvdmVyZmxvdzogc2Nyb2xsOwogIG1heC1oZWlnaHQ6IDQwMHB4OwogIGZvbnQtc2l6ZTogMTRweDsKICBtYXJnaW4tYm90dG9tOiAyMHB4Owp9CgoubWFpbC1zZWxlY3QgewogIG1hcmdpbi1sZWZ0OiAzMHB4Owp9CgoubWFpbC1zZWxlY3QgYnV0dG9uIHsKICBiYWNrZ3JvdW5kOiAjNGZjYmM1OwogIGNvbG9yOiB3aGl0ZTsKICBtYXJnaW46IDIwcHggMCAwIDIwcHg7CiAgY3Vyc29yOiBwb2ludGVyOwp9CgouZW1haWwtY29udGFpbmVyIHsKICBtYXJnaW46IDIwcHggMCAwIDIwcHg7CiAgd2lkdGg6IDQwMHB4OwogIGJveC1zaGFkb3c6IDBweCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4yNSk7CiAgcGFkZGluZzogMTBweCAyMHB4Owp9CgouZW1haWwtaGVhZGVycyB7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwp9CgoucmVtb3ZhbCB7CiAgd2lkdGg6IDIwMHB4OwogIGN1cnNvcjogcG9pbnRlcjsKICBib3JkZXItcmFkaXVzOiAzcHg7CiAgYm94LXNoYWRvdzogMnB4IDJweCAycHggcmdiYSgwLCAwLCAwLCAwLjU1KTsKICBwYWRkaW5nOiA1cHggMTBweDsKICBtYXJnaW46IDEwcHggMDsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICBiYWNrZ3JvdW5kOiBvcmFuZ2U7CiAgY29sb3I6IHJnYigyNTUsIDI0OCwgMjM2KTsKICBmb250LXNpemU6IDE4cHg7Cn0KCi5hdHRhY2htZW50cyB7CiAgbWFyZ2luLWxlZnQ6IDIwcHg7Cn0KCi5hdHRhY2htZW50cyBzcGFuIHsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KCi5ib2R5LWxpbmsgewogIGN1cnNvcjogcG9pbnRlcjsKfQoKLmhpZGRlbiB7CiAgZGlzcGxheTogbm9uZTsKfQoKLmJvcmRlciB7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGxpZ2h0Z3JleTsKfQoKLmRhdGEtdGFibGUgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IHJvdzsKfQoKLmRhdGEtc2VsZWN0aW9uIHsKICBmbGV4OiAwIDAgMTgwcHg7CiAgbWFyZ2luOiA1cHg7CiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICBvdmVyZmxvdzogaGlkZGVuOwogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOwp9CgouZmEtcGx1cyB7CiAgbWFyZ2luOiAxNXB4OwogIGZvbnQtc2l6ZTogMjBweDsKfQoKYnV0dG9uIHsKICBjdXJzb3I6IHBvaW50ZXI7CiAgYm9yZGVyLXJhZGl1czogM3B4OwogIGJveC1zaGFkb3c6IDBweCAycHggNXB4IHJnYmEoMCwgMCwgMCwgMC41NSk7CiAgcGFkZGluZzogNXB4IDEwcHg7CiAgYmFja2dyb3VuZDogIzRmY2JjNTsKICBjb2xvcjogd2hpdGU7Cn0KCi5kdXBlTWVzc2FnZSB7CiAgY29sb3I6IHJlZDsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTkwcHgsIDM1cHgpOwogIGZvbnQtc2l6ZTogMTFweDsKfQoK"},{"version":3,"sources":["ParsingRules.vue"],"names":[],"mappingsmrCA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ParsingRules.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"parsing-container\">\n    <div class=\"parsing-description\">\n      <span><label>Parsing Rule Name: </label> <input type=\"text\" :class=\"{'duplicate': dupeName, 'duplicate': includesDash}\" v-model=\"ruleName\" @change=\"evalName()\"><span class=\"dupeMessage\" v-if=\"dupeName\">Name Already Exists</span><span class=\"dupeMessage\" v-if=\"includesDash\">Name Cannot Contain \"-\"</span></span>\n      <span><label>Parsing Mailbox: </label> <input type=\"text\" v-model=\"mailbox\"><span v-if=\"mailbox && mailbox.length > 0\">{{ domain == 'app' ? '@livemail.opiniion.com' : '@demomail.opiniion.com' }}</span></span><br>\n      <span>Rule fires when </span>\n      <select v-model=\"trigger\">\n        <option value=\"subject\">Subject</option>\n        <option value=\"fileType\">File Type</option>\n        <option value=\"body\">Body</option>\n      </select>\n      <span v-if=\"trigger == 'subject' || trigger == 'body'\"> includes: <input type=\"text\" v-model=\"fileName\"> <span v-if=\"trigger == 'body'\" > in the first 500 characters) </span>\n      </span>\n      <span v-if=\"trigger == 'fileType'\"> is:\n        <select v-model=\"parseFileType\">\n          <option v-for=\"file in fileOptions\">{{file}}</option>\n        </select>\n        with <input type=\"text\" v-model=\"parseFileName\" placeholder=\"Insert filename element\"> in the filename.\n      </span>\n    </div>\n    <div class=\"mail-select\" v-if=\"trigger\">\n      <button @click=\"displaySamples = true\">Select Email To Create Parsing Rule</button>\n      <div class=\"email-container\" v-for=\"mail in sampleEmails\" v-if=\"displaySamples\">\n        <div class=\"email-headers\">\n          <span>From: {{mail.email.from}}</span>\n          <span>Subject: {{mail.email.subject}}</span>\n          <span v-if=\"mail.email.attachments && mail.email.attachments.length > 0\">Attachments:</span>\n          <span class=\"body-link\" v-if=\"!mail.email.attachments || mail.email.attachments.length == 0\" @click=\"parseBody(mail.email.body.textashtml)\">Use Body</span>\n        </div>\n        <div class=\"attachments\" v-for=\"attachment in mail.email.attachments\" v-if=\"mail && mail.email.attachments\">\n          <span @click=\"addFile(attachment)\">- {{attachment.filename}} {{attachment.size}}</span>\n        </div>\n      </div>\n      <div style=\"margin-top:5px;margin-left:80px;\" v-if=\"!fileExists\">No Email Selected Yet</div>\n      <div class=\"upload-container\">\n        Upload Example File to Set Parsing Rules\n        <input ref=\"fileInput\" type=\"file\" accept=\"text/csv, .xml, .xls, .xlsx, .txt\" @change=\"addManualFile($event)\" />\n      </div>\n    </div>\n    <div v-if=\"fileExists && !displaySamples && selectedFile\">Parsing {{selectedFile.filename}}</div>\n    <div class=\"data-display\" v-for=\"(rule, i) in rules\" v-if=\"fileExists\">\n      <div class=\"filter-options\" v-if=\"i != 0\">\n        <span >\n          <label v-if=\"rule.check != 'customerCreate'\">Filter by</label>\n          <select v-model=\"rule.check\">\n            <option value=\"remsel\">Remove & Select</option>\n            <option value=\"spmetrans\">Split, Merge, & Transpose</option>\n            <option value=\"refine\">Refine Cell Values</option>\n            <option value=\"customerCreate\" hidden>CreateCustomers</option>\n          </select>\n          <select v-if=\"rule.check == 'remsel'\" v-model=\"rule.option\" @change=\"changeFilter(i, rule.option, rule.input)\">\n            <option value=\"rowByVal\">Filter Rows by Values</option>\n            <option value=\"rowByLen\">Filter Rows by Length</option>\n            <!-- <option value=\"rowByValLen\">Filter Rows by Value Length</option>\n            <option value=\"rowByColLen\">Filter Column by Value Length</option> -->\n            <option value=\"rowRange\">Set Row Range</option>\n            <option value=\"colRange\">Set Column Range</option>\n            <option value=\"remCol\">Remove Columns</option>\n            <option value=\"remRow\">Remove Rows</option>\n          </select>\n          <select v-if=\"rule.check == 'spmetrans'\" v-model=\"rule.option\" @change=\"changeFilter(i, rule.option, rule.input)\">\n            <option value=\"explodeCol\">Explode Columns</option>\n            <option value=\"mergeCol\">Merge Columns</option>\n          </select>\n          <select v-if=\"rule.check == 'refine'\" v-model=\"rule.option\" @change=\"changeFilter(i, rule.option, rule.input)\">\n            <option value=\"searchReplace\">Search & Replace</option>\n            <option value=\"formDates\">Format Dates</option>\n          </select>\n          <div class=\"save-container\" v-if=\"rule.check == 'customerCreate'\">\n            Input Example:\n            <div class=\"api-example\">\n              https://api.opiniion.com/_services/opiniion/customer\n              {\n                \"location\": <v-select class=\"v-select\" v-model=\"rule.activeLocation\" :options=\"locationOptions\" :on-change=\"changeLocation(i, rule.activeLocation)\" placeholder=\"Select Location\" >\n                  <span slot=\"no-options\">Sorry, no locations were found with that filter.</span>\n                </v-select>\n                <span v-if=\"rule.option && rule.input.locationId\">\"uid\": {{rule.input.locationId}},</span>\n                <span v-if=\"rule.option && rule.input.apiKey\">\"apiKey\": {{rule.input.apiKey}},</span>\n                \"firstname\":  <select v-model=\"rule.input.firstname\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n                </select> ,\n                \"lastname\":  <select v-model=\"rule.input.lastname\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n                </select> ,\n                \"email\":  <select v-model=\"rule.input.email\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n                </select> ,\n                \"countrycode\": +1,\n                \"phone\":  <select v-model=\"rule.input.phone\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n                </select> ,\n                \"notes\":  <select v-model=\"rule.input.notes\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in maxColumn(rules[i-1].data, ['None', 'Custom'])\">{{option}}</option>\n                </select>\n                <span v-if=\"rule.input.notes == 'Custom'\">Custom Note: <input type=\"text\" v-model=\"rule.input.customNote\" @change=\"changeFilter(i, 'processCustomers', rule.input)\"> </span>\n                <span v-if=\"rule.input.location && rule.input.location.qsEnabled\">, \"q\":</span> <select v-if=\"rule.input.location && rule.input.location.qsEnabled\" v-model=\"rule.input.q\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in qSelection\">{{option}}</option>\n                </select>\n              }\n            </div>\n          </div>\n          <span v-if=\"rule.option == 'rowByVal'\">\n            Keep row if column #\n            <input type=\"number\" v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\" min=\"0\">\n            <select v-model=\"rule.input.type\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option value=\"hasVal\" selected>has a value</option>\n              <option value=\"isWord\">is a single word</option>\n              <option value=\"isNum\">is a number</option>\n              <option value=\"conTerm\">contains a specfic term</option>\n              <option value=\"noConTerm\">doesn't contain term</option>\n            </select>\n            <input type=\"text\" v-if=\"rule.input.type == 'conTerm' || rule.input.type == 'noConTerm'\" v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n          </span>\n          <span v-if=\"rule.option == 'rowByLen'\">\n            Keep rows with <input type=\"number\" :min=\"0\" :max=\"rule.data[0] ? rule.data[0].length : 50\" v-model=\"rule.input.value\" @change=\"changeFilter(i, rule.option, rule.input)\"> Columns\n          </span>\n          <span v-if=\"rule.option == 'rowByValLen'\">\n            <select v-model=\"rule.input.type\">\n              <option value=\"remove\">Remove Row If</option>\n              <option value=\"keep\">Keep Row If</option>\n            </select>\n            row at column #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n            </select>\n            <select v-model=\"rulr.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option value=\"is\">is equal to</option>\n              <option value=\"not\">is not equal to</option>\n            </select>\n            <input type=\"number\" min=\"1\" max=\"50\" v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\"> characters in length\n          </span>\n          <span v-if=\"rule.option == 'rowByColLen'\">\n            <select v-model=\"rule.input.type\">\n              <option value=\"remove\">Remove Column If</option>\n              <option value=\"keep\">Keep column If</option>\n            </select>\n            at column number #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n            </select>\n            <select v-model=\"rulr.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option value=\"is\">is equal to</option>\n              <option value=\"not\">is not equal to</option>\n            </select>\n            <input type=\"number\" min=\"1\" max=\"50\" v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\"> characters in length\n          </span>\n          <span v-if=\"rule.option == 'rowRange'\">\n            <select v-model=\"rule.input.type\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option value=\"remove\">Remove From Start / End</option>\n              <option value=\"fix\">Fixed Start / End</option>\n            </select>\n            <span v-if=\"rule.input.type == 'remove'\">\n              Skip First\n              <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n              </select>\n              and crop last\n              <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n              </select>\n              rows\n            </span>\n            <span v-if=\"rule.input.type == 'fix'\">\n              From row #\n              <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n              </select>\n              to #\n              <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n              </select>\n            </span>\n          </span>\n          <span v-if=\"rule.option == 'colRange'\">\n            <select v-model=\"rule.input.type\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option value=\"remove\">Remove From Start / End</option>\n              <option value=\"fix\">Fixed Start / End</option>\n            </select>\n            <span v-if=\"rule.input.type == 'remove'\">\n              Skip First\n              <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n              </select>\n              and crop last\n              <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n              </select>\n              columns\n            </span>\n            <span v-if=\"rule.input.type == 'fix'\">\n              From column #\n              <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n              </select>\n              to #\n              <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n              </select>\n            </span>\n          </span>\n          <span v-if=\"rule.option == 'remCol'\">\n            Remove column #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value4\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value5\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n            </select>\n          </span>\n          <span v-if=\"rule.option == 'remRow'\">\n            Remove row #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index).concat(['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index).concat(['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index).concat(['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value4\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index).concat(['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value5\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index).concat(['None'])\">{{option}}</option>\n            </select>\n          </span>\n          <span v-if=\"rule.option == 'explodeCol'\">\n            Split column #\n            <select v-model=\"rule.input.type\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n            </select>\n            at occurence of\n            <input type=\"text\" v-model=\"rule.input.value\" @change=\"changeFilter(i, rule.option, rule.input)\"> (use space for between words)\n          </span>\n          <span v-if=\"rule.option == 'mergeCol'\">\n            merge from cell\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n            </select>\n            to\n            <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n            </select>\n            columns\n          </span>\n          <span v-if=\"rule.option == 'searchReplace'\">\n            In column #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n            </select>\n            replace\n            <input type=\"text\" v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n            with\n            <input type=\"text\" v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\">\n          </span>\n          <span v-if=\"rule.option == 'formDates'\">\n            Column #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n            </select>\n            format from\n            <input type=\"text\" v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n            to\n            <input type=\"text\" placeholder=\"Y-M-D\" v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\">\n          </span>\n        </span>\n      </div>\n      <div class=\"removal\" @click=\"removeRule(i)\" v-if=\"rule.data && i != 0\">Remove Rule <i class=\"fal fa-times\"></i> </div>\n      <div class=\"data-container\" :class=\"{'hidden': rule.data.length == 0}\" >\n        <div class=\"data-table border\"><div class=\"data-selection\"  v-for=\"column in maxColumn(rule.data)\">{{column}}</div></div>\n        <div class=\"data-table\" v-for=\"datapoint in rule.data\">\n          <div class=\"data-selection\" v-for=\"data in datapoint\" :title=\"data\">\n            {{data ? data : ''}}\n          </div>\n        </div>\n      </div>\n      <div class=\"\" v-if=\" fileExists && (!rule.data || rule.data.length == 0) && (rule.check != 'customerCreate')\">\n        No data would pass this filter.\n      </div>\n\n      <span >Add New Parsing Rule <i class=\"fal fa-plus\" @click=\"addRule(i)\" title=\"Add Additional Rule\"></i>\n      </span>\n\n      <span v-if=\"rule.data && i == rules.length -1\">\n        Add Customer Creation Rule  <i class=\"fal fa-plus\" v-if=\"rule.data && i == rules.length -1\" @click=\"addCustomerRule()\" title=\"Add Customer Creation Rule\"></i>\n      </span>\n\n      <span v-if=\"rule.check && rule.check == 'customerCreate' && rule.option && (rule.input.email || rule.input.phone) && ruleName && mailbox && !dupeName && !includesDash\"><button @click=\"saveRules()\"> Save Parsing Rules</button></span>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport config from \"../config.js\";\nimport { EventService } from \"../main\";\nimport Papa from \"../../node_modules/papaparse/papaparse.js\";\nimport ParsingService from \"../services/ParsingService.js\";\nimport UserService from \"../services/UserService.js\";\nimport LocationService from \"../services/LocationService.js\";\nimport XLSX from \"xlsx\";\nimport convertFromXML from \"xml-js\";\nimport vSelect from \"../../node_modules/vue-select/src/components/Select.vue\";\nimport AutomationService from '../services/AutomationService';\n\nexport default {\n  name: \"csvPreview\",\n  components: {\n    vSelect\n  },\n  data: function() {\n    return {\n      csv: [],\n      xml: [],\n      sampleEmails: [],\n      fileOptions: [\"csv\", \"xml\", \"xls\", \"xlsx\", \"txt\"],\n      indicators: [\"subject\", \"fromName\", \"body\"],\n      fileName: \"\",\n      fileExists: false,\n      displaySamples: false,\n      newFile: \"\",\n      trigger: \"\",\n      parseFileType: \"\",\n      parseFileName: \"\",\n      selectedFile: '',\n      mailbox: \"\",\n      json: \"\",\n      domain: \"\",\n      activeLocation: \"\",\n      locationOptions: [],\n      ruleName: \"\",\n      rules: [{ data: \"\", option: \"intialData\" }],\n      qSelection: ['default', 1, 2, 3],\n      allRuleNames: [],\n      dupeName: false,\n      includesDash: false,\n    };\n  },\n  computed: {\n    data() {\n      let vm = this;\n      if (vm.json) {\n        return vm.json.splice(1, 11);\n      }\n    }\n  },\n  created() {\n    if(this.$route.params.parser) {\n      this.getParsingRule();\n    }\n    this.selectedLocation = localStorage.getItem(\"locationId\");\n    this.getAllParsingRuleNames();\n    this.getLocationOptions();\n    this.getSampleMail();\n    this.domain = config.subDomain;\n  },\n  methods: {\n    getAllParsingRuleNames() {\n      let vm = this;\n      ParsingService.getParsingRules().then(response => {\n        response.response.map(rule => {\n          vm.allRuleNames.push(rule.parsingRules.name);\n        })\n      })\n    },\n    // evaluateData(data) {\n    //   data.map(line => {\n    //     console.log(line.length);\n    //   })\n    //   return data[0]\n    // },\n    evalName() {\n      let vm = this;\n      if(vm.allRuleNames.includes(vm.ruleName)) {\n        vm.dupeName = true;\n      } else if(vm.ruleName.includes(\"-\")) {\n        vm.includesDash = true;\n      } else {\n        vm.includesDash = false;\n        vm.dupeName = false;\n      }\n    },\n    maxColumn(data, concat) {\n      let lineLength = 0;\n      data.map(line => {\n        if(line.length > lineLength) lineLength = line.length\n      })\n      if(concat) {\n        return Array.from(new Array(lineLength),(val,index)=>index).concat(concat);\n      } else {\n        return Array.from(new Array(lineLength),(val,index)=>index);\n      }\n    },\n    getParsingRule(){\n      let vm = this;\n      ParsingService.getParsingRule(this.$route.params.parser).then(response => {\n        vm.selectedRule = response.result[0];\n        if(!this.$route.params.action) {\n\n          vm.ruleName = vm.selectedRule.parsingRules.name;\n          vm.mailbox = vm.selectedRule.mailbox.substr(0, vm.selectedRule.mailbox.indexOf('@'));\n        }\n        vm.rules = vm.selectedRule.parsingRules.rules;\n        vm.trigger = vm.selectedRule.parsingRules.trigger;\n        vm.parseFileType = vm.selectedRule.parsingRules.fileType;\n        vm.fileExists = true;\n        if(vm.trigger == 'subject') {\n          vm.fileName = vm.selectedRule.parsingRules.value;\n        } else {\n          vm.parseFileName = vm.selectedRule.parsingRules.parseFileName;\n        }\n        vm.rules.map(rule => {\n          if(rule.check && rule.check == 'customerCreate') {\n            rule.activeLocation = rule.input.location;\n          }\n        })\n      })\n    },\n    getLocationOptions() {\n      let vm = this;\n      UserService.getAllUserLocations().then(response => {\n        response.map(e => {\n          let singleLocation = {\n            label: e.name,\n            value: e.locationId,\n            api: e.apiKey,\n            qsEnabled: e.prop\n          };\n          vm.locationOptions.push(singleLocation);\n        });\n      });\n    },\n    getSampleMail() {\n      let vm = this;\n      ParsingService.getSampleMail().then(response => {\n        vm.sampleEmails = response.response;\n        // console.log(vm.sampleEmails);\n      });\n    },\n    addFile(file) {\n      let vm = this;\n      // EventService.$emit(\"loading\", \"show\");\n      if (file) {\n        vm.fileExists = true;\n        vm.displaySamples = false;\n        vm.selectedFile = file;\n        let exampleFile = file;\n        let fileName;\n        if(exampleFile.filename.includes('.zip')) {\n          fileName = exampleFile.filename.substr(0,exampleFile.filename.lastIndexOf('.'));\n          } else {\n          fileName = exampleFile.filename;\n        }\n        let fileType = fileName.substr(fileName.lastIndexOf(\".\") + 1);\n        if (fileType == \"xlsx\" || fileType == \"xls\") {\n          var rABS = true;\n          var data = atob(exampleFile.content);\n          if (!rABS) data = new Uint8Array(data);\n          var workbook = XLSX.read(data, { type: rABS ? \"binary\" : \"array\" });\n          let processedXLS = XLSX.utils.sheet_to_json(\n            workbook.Sheets[workbook.SheetNames[0]],\n            { header: 1 }\n          ).filter(row => {\n            return row.length > 0;\n          });\n          let maxSize = 0;\n          processedXLS.map(e => {\n            if(e.length > maxSize) maxSize = e.length;\n          })\n          let diff = maxSize - processedXLS[0].length;\n          while (diff > 0) {\n            processedXLS[0].push('-');\n            diff = maxSize - processedXLS[0].length;\n          }\n          if (processedXLS.length > 20) {\n            vm.rules[0].data = processedXLS\n              .splice(0, 11)\n              .concat(processedXLS.splice(-10));\n          } else {\n            vm.rules[0].data = processedXLS;\n          }\n        } else if (fileType == \"csv\") {\n          let processedCSV;\n          Papa.parse(atob(exampleFile.content), {\n            complete: function(results) {\n              processedCSV = results.data;\n              if (processedCSV.length > 20) {\n                vm.rules[0].data = processedCSV\n                  .splice(0, 11)\n                  .concat(processedCSV.splice(-10));\n              } else {\n                vm.rules[0].data = processedCSV;\n              }\n            }\n          });\n        } else if (fileType == \"xml\") {\n          var data = atob(exampleFile.content);\n          vm.convertXML(data);\n        } else if (fileType == \"txt\") {\n          var data = atob(exampleFile.content);\n          let parser = new DOMParser();\n          let newDoc = parser.parseFromString(JSON.parse(data), \"text/html\");\n          let test = newDoc.getElementsByTagName(\"tr\");\n          let newArr = [...test];\n          let customerList = [];\n          let headerArr = [];\n          newArr.map(g => {\n            let headers = g.getElementsByTagName(\"th\");\n            if (headers.length > 0) {\n              headerArr.push([...headers]);\n            }\n          });\n          let headersList = [];\n          headerArr.map(h => {\n            h.map(g => {\n              headersList.push(g.innerHTML);\n            });\n          });\n          let nextArr = [];\n          newArr.map(e => {\n            let testing = e.getElementsByTagName(\"td\");\n            let customer = {};\n            let nextArray = [...testing];\n            nextArray.map((f, i) => {\n              let header = headersList[i];\n              let value = f.textContent;\n              customer[header] = value;\n            });\n            if (Object.keys(customer).length > 3) {\n              customerList.push(customer);\n            }\n          });\n          let csvVersion = Papa.unparse(customerList);\n          let jsonVersion = Papa.parse(csvVersion);\n          jsonVersion = jsonVersion.data;\n          if (jsonVersion.length > 20) {\n            vm.rules[0].data = jsonVersion\n              .splice(0, 11)\n              .concat(jsonVersion.splice(-10));\n          } else {\n            vm.rules[0].data = jsonVersion;\n          }\n        } else {\n          console.log(\"Error, this has been rejected for incorrect file type.\");\n        }\n        if(vm.rules && vm.rules.length > 1) {\n          vm.rules.map((rule, i) => {\n            if(i > 0) {\n              rule.data.map(dataset => {\n                if(dataset && dataset.length > 0) {\n                  vm.changeFilter(i, rule.option, rule.input);\n                }\n              })\n            }\n          })\n        }\n      }\n    },\n    parseBody(email) {\n      let vm = this;\n      vm.fileExists = true;\n      vm.displaySamples = false;\n      vm.selectedFile = email;\n      var parser = new DOMParser();\n      var htmlDoc = parser.parseFromString(email, 'text/html');\n      var pArray = Array.from(htmlDoc.getElementsByTagName('p'));\n      let usableData = pArray[4].innerHTML.split('&lt;');\n      let customersList = [];\n      usableData.map((ptag, i) => {\n        customersList.push(ptag.substring(ptag.indexOf('<br>'))\n        .replace(/<a href=\"mailto:/gi, '')\n        .replace('\">', ' ')\n        .replace(/<\\/a>/gi, '')\n        .replace(/ -/gi, '')\n        .replace(/-/gi, '')\n        .replace(/ <br>/gi, '')\n        .replace(/<br>/gi, '')\n        .replace(/ &amp;/gi, '')\n        .replace(/&amp;/gi, '')\n        .split(' '));\n        // console.log(typeof ptag, ptag);\n      })\n      if (customersList.length > 100) {\n        vm.rules[0].data = customersList\n          .splice(0, 50)\n          .concat(customersList.splice(-50));\n      } else {\n        vm.rules[0].data = customersList;\n      }\n      // let parsedCustomers = [];\n      // let parsedData = Papa.parse(email, {delimeter: '\\\\n'});\n      // let unparsedData = Papa.unparse(parsedData.data);\n      // let newParseData = unparsedData.split('\\n');\n      // let customersList = [];\n      // newParseData.map(e => {\n      //   e = e.replace('\\n', '')\n      //   let data = e.split(' ');\n      //   if(data.length > 3) {\n      //     customersList.push(data);\n      //   }\n      // });\n      // // console.log(parsedCustomers);\n      // if (customersList.length > 100) {\n      //   vm.rules[0].data = customersList\n      //     .splice(0, 50)\n      //     .concat(customersList.splice(-50));\n      // } else {\n      //   vm.rules[0].data = customersList;\n      // }\n      // back end potential process.\n    // let lines = email.split('\\\\n');\n    // let parsedLines = []\n    // lines.map((l) => {\n    //   if (l.length > 10) {\n    //     let splitLine = l.split(' ');\n    //     let parsedLine = [];\n    //     splitLine.map((s) => {\n    //       if (s && s.length > 2) {\n    //         parsedLine.push(s);\n    //       }\n    //     })\n    //     parsedLines.push(parsedLine);\n    //   }\n    // })\n    //   if (parsedLines.length > 100) {\n    //     vm.rules[0].data = parsedLines\n    //       .splice(0, 50)\n    //       .concat(parsedLines.splice(-50));\n    //   } else {\n    //     vm.rules[0].data = parsedLines;\n    //   }\n    },\n    convertXML(xml) {\n      let vm = this;\n      let parser = new DOMParser();\n      let xmlDoc = parser.parseFromString(xml, \"text/xml\");\n      let xmlArr = xmlDoc.getElementsByTagName(\"Row\");\n      let newXMLArr = [...xmlArr];\n      let customerList = [];\n      newXMLArr.map(e => {\n        let customer = {};\n        let test = [...e.attributes];\n        test.map(f => {\n          let header = f.name;\n          let value = f.nodeValue;\n          customer[header] = value;\n        });\n        customerList.push(customer);\n      });\n      let csvVersion = Papa.unparse(customerList);\n      let jsonVersion = Papa.parse(csvVersion);\n      jsonVersion = jsonVersion.data;\n      if (jsonVersion.length > 20) {\n        vm.rules[0].data = jsonVersion\n          .splice(0, 11)\n          .concat(jsonVersion.splice(-10));\n      } else {\n        vm.rules[0].data = jsonVersion;\n      }\n    },\n    addRule(index) {\n      let vm = this;\n      vm.rules.splice( index+1, 0, {\n        data: [],\n        option: \"\",\n        input: {}\n      });\n    },\n    addCustomerRule() {\n      let vm = this;\n      vm.rules.push({\n        rule: vm.rules.length + 1,\n        check: \"customerCreate\",\n        data: [],\n        option: \"processCustomers\",\n        input: {}\n      });\n    },\n    removeRule(index) {\n      this.rules.splice(index, 1);\n    },\n    changeLocation(index, locationData) {\n      let vm = this;\n      if (vm.rules[index].input.location != locationData) {\n        vm.rules[index].input.location = locationData;\n        if(locationData && locationData.qsEnabled) {\n          AutomationService.getAutomationsByLocation(locationData.value).then(response => {\n            let qSelect = [];\n            response.result.map(auto => {\n              qSelect.push(auto.identifier)\n            })\n            vm.qSelection = qSelect;\n          })\n          // LocationService.getLocation(locationData.value).then(response => {\n            // let totalQs = response.question\n            // let automations = response.automations;\n            // automations.map(auto => {\n              //   vm.qSelection.push(automation.identifier)\n            // })\n          // })\n        }\n      }\n    },\n    changeFilter(index, option, input) {\n      let vm = this;\n      let previousData;\n      if (\n        vm.rules[index - 1].check &&\n        vm.rules[index - 1].check == \"customerCreate\"\n      ) {\n        previousData = JSON.parse(JSON.stringify(vm.rules[0].data));\n      } else {\n        previousData = JSON.parse(JSON.stringify(vm.rules[index - 1].data));\n      }\n      // console.log(...arguments);\n      switch (option) {\n        case \"rowByVal\":\n          if (input && input.value1 && input.type && input.value2) {\n            if (input.type == \"conTerm\") {\n              vm.rules[index].data = previousData.filter(e => {\n                return e[input.value1]\n                  .toLowerCase()\n                  .includes(typeof input.value2 == 'string' ? input.value2.toLowerCase() : input.value2);\n              });\n            } else if (input.type == \"noConTerm\") {\n              0;\n              vm.rules[index].data = previousData.filter(e => {\n                return !e[input.value1]\n                  .toLowerCase()\n                  .includes(typeof input.value2 == 'string' ? input.value2.toLowerCase() : input.value2);\n              });\n            }\n          } else if (input && input.value1 && input.type) {\n            if (input.type == \"hasVal\") {\n              vm.rules[index].data = previousData.filter(e => {\n                return e[input.value1];\n              });\n            } else if (input.type == \"isWord\") {\n              vm.rules[index].data = previousData.filter(e => {\n                // Needs more work to determine if string or not.\n                return (\n                  e[input.value1] &&\n                  typeof e[input.value1] == \"string\" &&\n                  e[input.value1].trim().indexOf(\" \") == -1\n                );\n              });\n            } else if (input.type == \"isNum\") {\n              // console.log(previousData);\n              vm.rules[index].data = previousData.filter(e => {\n                return parseInt(e[input.value1]);\n              });\n            }\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"rowByLen\":\n          if (input && input.value) {\n            vm.rules[index].data = previousData.filter(e => {\n              if (e) {\n                return e.length == input.value;\n              }\n            });\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"rowByValLen\":\n          break;\n\n        case \"rowByColLen\":\n          break;\n\n        case \"rowRange\":\n          if (input && input.type) {\n            if (input.type == \"remove\") {\n              if (input.value1 && input.value2) {\n                let newValues = previousData.slice(\n                  input.value1,\n                  vm.rules[index - 1].data.length - input.value2\n                );\n                vm.rules[index].data = newValues;\n              }\n            } else if (input.type == \"fix\") {\n              if (input.value1 && input.value2) {\n                let newValues = previousData.slice(\n                  input.value1,\n                  input.value2 - input.value1 + 1\n                );\n                vm.rules[index].data = newValues;\n              }\n            }\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"colRange\":\n          if (input && input.type) {\n            if (input.type == \"remove\") {\n              if (input.value1 && input.value2) {\n                let newValues = [];\n                vm.rules[index - 1].data.map(e => {\n                  newValues.push(\n                    e.slice(input.value1, e.length - input.value2)\n                  );\n                });\n                vm.rules[index].data = newValues;\n              }\n            } else if (input.type == \"fix\") {\n              if (input.value1 && input.value2) {\n                let newValues = [];\n                vm.rules[index - 1].data.map(e => {\n                  newValues.push(e.slice(input.value1, input.value2));\n                });\n                vm.rules[index].data = newValues;\n              }\n            }\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"remCol\":\n          if (\n            input &&\n            (input.value1 ||\n              input.value2 ||\n              input.value3 ||\n              input.value4 ||\n              input.value5)\n          ) {\n            let newValues = vm.rules[index - 1].data;\n            let inputKeys = Object.keys(input);\n            inputKeys.map((inputVal, g) => {\n              newValues = newValues.map((e, i) => {\n                return e.filter((x, j) => {\n                  return j != parseInt(input[inputVal]);\n                });\n              });\n            });\n            vm.rules[index].data = newValues;\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"remRow\":\n          if (\n            input &&\n            (input.value1 ||\n              input.value2 ||\n              input.value3 ||\n              input.value4 ||\n              input.value5)\n          ) {\n            let newData = previousData;\n            let inputKeys = Object.keys(input);\n            inputKeys.map(inputVal => {\n              newData = newData.filter((e, i) => {\n                return i != parseInt(input[inputVal]);\n              });\n            });\n            vm.rules[index].data = newData;\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"explodeCol\":\n          if (input && input.type && input.value) {\n            let colLengths = [];\n            vm.rules[index - 1].data.map(e => {\n              if(e[input.type]) {\n                colLengths.push(e[input.type].split(input.value).length);\n              }\n            });\n            let newColNum = Math.max(...colLengths);\n            let newValues = previousData;\n            newValues.map(e => {\n              if(e[input.type]) {\n                let newColumns = e[input.type].split(input.value);\n                if (newColumns.length != newColNum) {\n                  newColumns.length = newColNum;\n                  newColumns.fill(0, newColumns.length);\n                }\n                e.splice(input.type, 1, ...newColumns);\n              }\n            });\n            vm.rules[index].data = newValues;\n          } else {\n            vm.rules[index].data = vm.rules[index - 1].data;\n          }\n          break;\n\n        case \"mergeCol\":\n          if (input && input.value1 && input.value2) {\n            let input1 = parseInt(input.value1);\n            let input2 = parseInt(input.value2);\n            let newArray = [];\n            let newValues = previousData;\n            newValues.map(x => {\n              let newItem = x\n                .slice(input1, input2 + 1)\n                .join()\n                .replace(\",\", \", \");\n              x.splice(input1, input2 + 1 - input1, newItem);\n              newArray.push(x);\n            });\n            vm.rules[index].data = newArray;\n          } else {\n            vm.rules[index].data = vm.rules[index - 1].data;\n          }\n          break;\n\n        case \"searchReplace\":\n          if (input && input.value1 && input.value2) {\n            let input1 = parseInt(input.value1);\n            if (!input.value3) input.value3 = \"\";\n            let newValues = previousData;\n            newValues.map(e => {\n              e[input1] = e[input1]\n                .toString()\n                .replace(input.value2, input.value3);\n            });\n            vm.rules[index].data = newValues;\n          } else {\n            vm.rules[index].data = vm.rules[index - 1].data;\n          }\n          break;\n\n        case \"formDates\":\n          if (input && input.value1 && input.value2) {\n            alert(\n              \"Can't do this operation at this time until we standardize what dates we want coming in, if we do want to capture that data.\"\n            );\n          } else {\n            vm.rules[index].data = vm.rules[index - 1].data;\n          }\n          break;\n\n        case \"processCustomers\":\n          if (input.email || input.phone) {\n            let data = previousData;\n            let customerList = [];\n            data.map(customer => {\n              let newCustomer = {\n                firstname: input.firstname ? customer[input.firstname] : \"\",\n                lastname: input.lastname ? customer[input.lastname] : \"\",\n                email: input.email ? customer[input.email] : \"\",\n                phone: input.phone ? customer[input.phone] : \"\",\n                notes: input.notes ? customer[input.notes] : \"\"\n              };\n              if(input.notes == 'Custom') {\n                newCustomer.notes = input.customNote;\n              }\n              customerList.push(newCustomer);\n            });\n            vm.rules[index].data = customerList;\n          }\n          break;\n\n        default:\n          if (input && input.value) {\n            console.log(input.value);\n          } else {\n            vm.rules[index].data = vm.rules[index - 1].data;\n          }\n      }\n      if (index != vm.rules.length - 1) {\n        vm.rules.map((e, i) => {\n          if (i > index) {\n            vm.changeFilter(i, e.option, e.input);\n          }\n        });\n      }\n    },\n    mapData() {\n      this.csvData.map((e, i) => {\n        e.map((h, j) => {\n          h = h.trim();\n        });\n      });\n    },\n    addManualFile(event) {\n      let vm = this;\n      // EventService.$emit(\"loading\", \"show\");\n      if (event.target.files[0]) {\n        vm.fileExists = true;\n        let exampleFile = event.target.files[0];\n        let fileName = exampleFile.name;\n        let fileType = fileName.substr(fileName.indexOf(\".\") + 1);\n        if (fileType == \"xlsx\" || fileType == \"xls\") {\n          var rABS = true;\n          var reader = new FileReader();\n          reader.onload = function(e) {\n            var data = e.target.result;\n            if (!rABS) data = new Uint8Array(data);\n            var workbook = XLSX.read(data, { type: rABS ? \"binary\" : \"array\" });\n            let processedXLS = XLSX.utils.sheet_to_json(\n              workbook.Sheets[workbook.SheetNames[0]],\n              { header: 1 }\n            ).filter(row => {\n            return row.length > 0;\n          });;\n            let maxSize = 0;\n            processedXLS.map(e => {\n              if(e.length > maxSize) maxSize = e.length;\n            })\n            let diff = maxSize - processedXLS[0].length;\n            while (diff > 0) {\n              processedXLS[0].push('-');\n              diff = maxSize - processedXLS[0].length;\n            }\n            if (processedXLS.length > 20) {\n              vm.rules[0].data = processedXLS\n                .splice(0, 11)\n                .concat(processedXLS.splice(-10));\n            } else {\n              vm.rules[0].data = processedXLS;\n            }\n          };\n          if (rABS) reader.readAsBinaryString(exampleFile);\n          else reader.readAsArrayBuffer(exampleFile);\n        } else if (fileType == \"csv\") {\n          let processedCSV;\n          Papa.parse(exampleFile, {\n            complete: function(results) {\n              processedCSV = results.data;\n              if (processedCSV.length > 20) {\n                vm.rules[0].data = processedCSV\n                  .splice(0, 11)\n                  .concat(processedCSV.splice(-10));\n              } else {\n                vm.rules[0].data = processedCSV;\n              }\n            }\n          });\n        } else if (fileType == \"xml\") {\n          let reader = new FileReader();\n          reader.onload = function(e) {\n            var data = e.target.result;\n            vm.convertManualXML(data);\n          };\n          reader.readAsText(exampleFile);\n        } else if (fileType == \"txt\") {\n          let reader = new FileReader();\n          reader.onload = function(e) {\n            var data = e.target.result;\n            let parser = new DOMParser();\n            let newDoc = parser.parseFromString(JSON.parse(data), \"text/html\");\n            let test = newDoc.getElementsByTagName(\"tr\");\n            let newArr = [...test];\n            let customerList = [];\n            let headerArr = [];\n            newArr.map(g => {\n              let headers = g.getElementsByTagName(\"th\");\n              if (headers.length > 0) {\n                headerArr.push([...headers]);\n              }\n            });\n            let headersList = [];\n            headerArr.map(h => {\n              h.map(g => {\n                headersList.push(g.innerHTML);\n              });\n            });\n            let nextArr = [];\n            newArr.map(e => {\n              let testing = e.getElementsByTagName(\"td\");\n              let customer = {};\n              let nextArray = [...testing];\n              nextArray.map((f, i) => {\n                let header = headersList[i];\n                let value = f.textContent;\n                customer[header] = value;\n              });\n              if (Object.keys(customer).length > 3) {\n                customerList.push(customer);\n              }\n            });\n            let csvVersion = Papa.unparse(customerList);\n            let jsonVersion = Papa.parse(csvVersion);\n            jsonVersion = jsonVersion.data;\n            // console.log(jsonVersion);\n            if (jsonVersion.length > 100) {\n              vm.rules[0].data = jsonVersion\n                .splice(0, 50)\n                .concat(jsonVersion.splice(-50));\n            } else {\n              vm.rules[0].data = jsonVersion;\n            }\n          };\n          reader.readAsText(exampleFile);\n        } else {\n          console.log(\"Error, this has been rejected for incorrect file type.\");\n        }\n        if(vm.rules && vm.rules.length > 1) {\n          vm.rules.map((rule, i) => {\n            if(i > 0) {\n              rule.data.map(dataset => {\n                if(dataset && dataset.length > 0) {\n                  vm.changeFilter(i, rule.option, rule.input);\n                }\n              })\n            }\n          })\n        }\n      }\n    },\n    convertManualXML(xml) {\n      let vm = this;\n      let parser = new DOMParser();\n      let xmlDoc = parser.parseFromString(xml, \"text/xml\");\n      let xmlArr = xmlDoc.getElementsByTagName(\"Row\");\n      let newXMLArr = [...xmlArr];\n      let customerList = [];\n      newXMLArr.map(e => {\n        let customer = {};\n        let test = [...e.attributes];\n        test.map(f => {\n          let header = f.name;\n          let value = f.nodeValue;\n          customer[header] = value;\n        });\n        customerList.push(customer);\n      });\n      let csvVersion = Papa.unparse(customerList);\n      let jsonVersion = Papa.parse(csvVersion);\n      jsonVersion = jsonVersion.data;\n      if (jsonVersion.length > 20) {\n        vm.rules[0].data = jsonVersion\n          .splice(0, 11)\n          .concat(jsonVersion.splice(-10));\n      } else {\n        vm.rules[0].data = jsonVersion;\n      }\n    },\n    saveRules() {\n      let vm = this;\n      let ruleId = null;\n      if(this.$route.params.parser && !this.$route.params.action) {\n        ruleId = this.$route.params.parser;\n      }\n      let parsingObject = {\n        name: vm.ruleName,\n        trigger: vm.trigger,\n        fileType: vm.parseFileType,\n        parseFileName: vm.parseFileName,\n        value: vm.fileName,\n        rules: vm.rules\n      };\n      let completeMailbox = ''\n      if(vm.mailbox.includes('@livemail.opiniion.com') || vm.mailbox.includes('@demomail.opiniion.com')) {\n        completeMailbox = vm.mailbox;\n      } else {\n        completeMailbox =\n        vm.domain == \"app\"\n          ? vm.mailbox + \"@livemail.opiniion.com\"\n          : vm.mailbox + \"@demomail.opiniion.com\";\n        }\n      ParsingService.saveParsingRules(completeMailbox, parsingObject, ruleId).then(\n        response => {\n          if (response.success) {\n            (vm.csv = []),\n            (vm.xml = []),\n            (vm.fileOptions = [\"csv\", \"xml\", \"xls\", \"xlsx\", \"txt\"]),\n            (vm.indicators = [\"subject\", \"fromName\", \"body\"]),\n            (vm.fileName = \"\"),\n            (vm.fileExists = false),\n            (vm.newFile = \"\"),\n            (vm.trigger = \"\"),\n            (vm.parseFileType = \"\"),\n            (vm.mailbox = \"\"),\n            (vm.json = \"\"),\n            (vm.domain = \"\"),\n            (vm.activeLocation = \"\"),\n            (vm.locationOptions = []),\n            (vm.ruleName = \"\"),\n            vm.selectedFile = '',\n            (vm.rules = [{ rule: 1, data: \"\", option: \"intialData\" }]);\n            vm.$router.push('/parsingList')\n          }\n        }\n      );\n    }\n  }\n};\n</script>\n\n<style scoped>\n.parsing-container {\n  min-height: 100vh;\n  background: white;\n  min-width: 100%;\n  padding-left: 10px;\n}\n\n.parsing-description {\n  margin-left: 30px;\n}\n\n.data-container {\n  border: 1px solid grey;\n  overflow: scroll;\n  max-height: 400px;\n  font-size: 14px;\n  margin-bottom: 20px;\n}\n\n.mail-select {\n  margin-left: 30px;\n}\n\n.mail-select button {\n  background: #4fcbc5;\n  color: white;\n  margin: 20px 0 0 20px;\n  cursor: pointer;\n}\n\n.email-container {\n  margin: 20px 0 0 20px;\n  width: 400px;\n  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.25);\n  padding: 10px 20px;\n}\n\n.email-headers {\n  display: flex;\n  flex-direction: column;\n}\n\n.removal {\n  width: 200px;\n  cursor: pointer;\n  border-radius: 3px;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.55);\n  padding: 5px 10px;\n  margin: 10px 0;\n  display: flex;\n  justify-content: space-between;\n  background: orange;\n  color: rgb(255, 248, 236);\n  font-size: 18px;\n}\n\n.attachments {\n  margin-left: 20px;\n}\n\n.attachments span {\n  cursor: pointer;\n}\n\n.body-link {\n  cursor: pointer;\n}\n\n.hidden {\n  display: none;\n}\n\n.border {\n  border-bottom: 1px solid lightgrey;\n}\n\n.data-table {\n  display: flex;\n  flex-direction: row;\n}\n\n.data-selection {\n  flex: 0 0 180px;\n  margin: 5px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.fa-plus {\n  margin: 15px;\n  font-size: 20px;\n}\n\nbutton {\n  cursor: pointer;\n  border-radius: 3px;\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.55);\n  padding: 5px 10px;\n  background: #4fcbc5;\n  color: white;\n}\n\n.dupeMessage {\n  color: red;\n  position: absolute;\n  transform: translate(-90px, 35px);\n  font-size: 11px;\n}\n\n</style>\n"]}]}