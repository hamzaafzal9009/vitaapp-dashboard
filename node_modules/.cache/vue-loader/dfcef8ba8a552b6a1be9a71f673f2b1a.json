{"remainingRequest":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/src/components/DashboardComponents/WordCloud.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/src/components/DashboardComponents/WordCloud.vue","mtime":1581270622000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKZyB7CiAgY3Vyc29yOiBwb2ludGVyOwp9Cgp0ZXh0LndvcmRjbG91ZC10ZXh0LW1haW4sCnRleHQud29yZGNsb3VkLXRleHQtbWVudGlvbiB7CiAgdGV4dC1hbmNob3I6IG1pZGRsZTsKfQoKLmRhc2hib2FyZC10aWxlIHsKICBmb250LXNpemU6IDE4cHg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKfQoKI3Bvc2l0aXZlLXdvcmQtY2xvdWQsCiNuZWdhdGl2ZS13b3JkLWNsb3VkIHsKICBwYWRkaW5nOiAwOwp9CgojcG9zaXRpdmUtd29yZC1jbG91ZCBzdmcsCiNuZWdhdGl2ZS13b3JkLWNsb3VkIHN2ZyB7CiAgbWFyZ2luOiAwIGF1dG87Cn0KCi53b3JkLWNsb3VkLWJvZHkgewogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwp9CgouZGFzaGJvYXJkLXNxdWFyZSB7CiAgbWF4LXdpZHRoOiA1MCU7CiAgd2lkdGg6IDQ1MHB4OwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBtYXJnaW4tdG9wOiAxNnB4Owp9CgouZGFzaGJvYXJkLXNxdWFyZS1oZWFkZXIgewogIGZvbnQtd2VpZ2h0OiBib2xkZXI7Cn0KCi5kYXNoYm9hcmQtdGlsZS1ib2R5IHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47Cn0KCi5kYXNoYm9hcmQtdGlsZS1ib2R5IHNwYW4gewogIGxpbmUtaGVpZ2h0OiAxNHB4OwogIHBhZGRpbmc6IDA7CiAgbWFyZ2luOiAwOwp9CgouZW1wdHktd29yZC1jbG91ZCB7CiAgY29sb3I6ICM4NTg1ODU7CiAgcGFkZGluZy10b3A6IDE2cHg7Cn0KCg=="},{"version":3,"sources":["WordCloud.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuOA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"WordCloud.vue","sourceRoot":"src/components/DashboardComponents","sourcesContent":["<template>\n  <el-card shadow=\"always\" class=\"tall-card\">\n    <el-row>\n      <div class=\"o-card-title-1 clickable\" @click=\"followLink('/feedback')\">Word Analysis</div>\n      <div class=\"word-cloud-body\">\n        <div class=\"dashboard-square\">\n          <span class=\"dashboard-square-header\" style=\"color: #9A9A9A; font-size: 18px;\">POSITIVE</span>\n          <div id=\"positive-word-cloud\"></div>\n          <div class=\"empty-word-cloud\" v-show=\"positiveWordCloud && positiveWordCloud.length < 1\">Not enough feedback to analyze.</div>\n        </div>\n        <div class=\"dashboard-square\">\n          <span class=\"dashboard-square-header\" style=\"color: #9A9A9A; font-size: 18px;\">NEGATIVE</span>\n          <div id=\"negative-word-cloud\"></div>\n          <div class=\"empty-word-cloud\" v-show=\"negativeWordCloud && negativeWordCloud.length < 1\">Not enough feedback to analyze.</div>\n        </div>\n      </div>\n      <div class=\"dashboard-row dashboard-loader\" v-show=\"showLoading\"><i class=\"far fa-hourglass fa-spin\"></i></div>\n    </el-row>\n  </el-card>\n</template>\n\n<script>\nimport DashboardService from './../../services/DashboardService';\nimport {EventService} from '../../main';\n\nexport default {\n  name: 'wordCloud',\n  data: function() {\n    return {\n      positiveWordCloud: null,\n      negativeWordCloud: null,\n      showLoading: true,\n      locationId: null,\n    }\n  },\n  mounted() {\n    this.getWordCloud();\n  },\n  created() {\n    EventService.$on('locationChange', this.getWordCloud);\n  },\n  beforeDestroy: function () {\n    EventService.$off('locationChange', this.getWordCloud);\n  },\n  methods: {\n    followLink(targetPage) {\n      this.$router.push(targetPage);\n    },\n    getWordCloud() {\n      this.showLoading = true;\n      this.locationId = localStorage.getItem(\"locationId\");\n      this.positiveWordCloud = null;\n      this.negativeWordCloud = null;\n      var vm = this;\n      DashboardService.getWordCloud(vm.locationId)\n        .then(function(response) {\n          // We have our data so stop showing the spinner.\n          vm.showLoading = false;\n\n          // Now assign the returned data to our variables. This is used for the logic in the HTML whether or not to display the 'Not enough data' message.\n          vm.positiveWordCloud = response.positiveWordCloud;\n          vm.negativeWordCloud = response.negativeWordCloud;\n\n          // Check that the responses actually have data before sending to be processed. If there is no data then remove the SVG to prevent stacking charts on locationChange.\n          response.positiveWordCloud.length > 0 ? vm.createWordCloud(response.positiveWordCloud, 'positive-word-cloud') : d3.select('#positive-word-cloud').selectAll('svg').remove();\n          response.negativeWordCloud.length > 0 ? vm.createWordCloud(response.negativeWordCloud, 'negative-word-cloud') : d3.select('#negative-word-cloud').selectAll('svg').remove();\n\n        }, function(error) {\n          console.log(error);\n      });\n    },\n    createWordCloud(data, cloud) {\n      // First clear out any existing SVG elements. In the event of a locationChange.\n      d3.select('#' + cloud).selectAll('svg').remove();\n\n      const width = document.getElementById(cloud).offsetWidth;\n      const height = 350;\n      const scaleUpFactor = 1;\n      const scaleDownFactor = 0.6;\n\n      const max = d3.max(data, d => d.size);\n      const min = d3.min(data, d => d.size);\n\n      const widths = [ 40, 45, 50, 70, 90 ];\n\n      const fontSizes = [ 8, 10, 12, 14, 16 ];\n\n      const factors = [ 1.4 ];\n\n      const widthScale = d3.scaleQuantize().domain([min, max]).range(widths);\n      const fontScale = d3.scaleQuantize().domain([min, max]).range(fontSizes);\n      const factorScale = d3.scaleQuantize().domain([min, max]).range(factors);\n\n\n      function handleMouseOver(d, i) {\n        const theese = d3.select(this);\n        const easeTransition = d3.transition().duration(150).ease(d3.easeLinear);\n        theese.raise();\n        theese.select('.wordCloudCircle')\n                .transition(easeTransition)\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke\", d => d.data.color)\n                .attr(\"r\", d => d.r * factorScale(d.data.size));\n        theese.select('text.wordcloud-text-main')\n                .transition(easeTransition)\n                .attr('font-size', d => {\n                  let fontSize = fontScale(d.data.size) * factorScale(d.data.size);\n                  const radius = d.r * factorScale(d.data.size);\n                  let numOfLetters = Math.floor((radius * 2) / (fontSize / 2));\n                  while(numOfLetters < d.data.name.length) {\n                    fontSize -= 2;\n                    numOfLetters = Math.floor((radius * 2) / (fontSize / 2));\n                  }\n                  return fontSize;\n                })\n                .attr('font-weight', 'bold')\n                .attr(\"fill\", d.data.color)\n                .text(d => d.data.name.charAt(0).toUpperCase() + d.data.name.slice(1));\n        theese.select('text.wordcloud-text-mention')\n                .transition(easeTransition)\n                .attr('fill', '#858585')\n                .attr(\"transform\", d => `translate(0,${fontScale(d.data.size) * factorScale(d.data.size) * 0.6 + 10})`)\n                .attr('font-size', d => fontScale(d.data.size) * factorScale(d.data.size) * 0.6)\n                .style(\"visibility\", 'visible');\n      }\n\n      function handleMouseOut(d, i) {\n        const theese = d3.select(this);\n        theese.select('.wordCloudCircle')\n                .transition()\n                .attr(\"fill\", d => d.data.color)\n                .attr(\"stroke\", \"none\")\n                .attr(\"r\", d => d.r);\n        theese.select('text.wordcloud-text-main')\n                .transition()\n                .attr('font-size', d => fontScale(d.data.size))\n                .attr(\"fill\", 'white')\n                .text((d) => {\n                  let word = d.data.name.charAt(0).toUpperCase() + d.data.name.slice(1);\n                  const font = fontScale(d.data.size);\n                  const numOfLetters = Math.floor((d.r * 2) / (font / 2));\n                  if (numOfLetters < word.length) {\n                    word = word.slice(0, numOfLetters - 3) + '...';\n                  }\n                  return word\n                })\n        theese.select('text.wordcloud-text-mention')\n                .transition()\n                .attr('font-size', d => fontScale(d.data.size) * scaleDownFactor )\n                .style(\"visibility\", 'hidden');\n      }\n\n      function handleMouseClick(d, i) {\n        window.location.href = '/feedback/' + d.data.name + '/' + (d.data.vibe[0].toUpperCase() + d.data.vibe.substr(1));\n      }\n\n      const svg = d3.select('#' + cloud).append(\"svg\")\n          .attr(\"width\", width)\n          .attr(\"height\", height);\n\n      const pack = d3.pack()\n                     .size([width, height])\n                     .padding(10);\n\n      function build(data) {\n        svg.selectAll('*').remove();\n        \n        const circleNodes = svg.selectAll('g')\n          .data(data)\n          .enter()\n          .append('g')\n          .attr('transform', d => `translate(${(d.x)},${(d.y)})`)\n          .on('mouseover', handleMouseOver)\n          .on('mouseout', handleMouseOut)\n          .on('click', handleMouseClick);\n\n        circleNodes.exit().remove();\n\n        const circles = circleNodes\n          .append('circle')\n          .attr('class', 'wordCloudCircle')\n          .attr('r', 1)\n          .transition()\n          .attr('r', d => d.r)\n          .attr(\"fill\", d => d.data.color)\n          .attr('stroke-width', 2);\n\n        const circleMainText = circleNodes\n          .append('text')\n          .attr('fill', 'white')\n          .attr('class', 'wordcloud-text-main')\n          .attr('font-size', d => fontScale(d.data.size))\n          .attr('dy', 4)\n          .text((d) => {\n            let word = d.data.name.charAt(0).toUpperCase() + d.data.name.slice(1);\n            const font = fontScale(d.data.size);\n            const numOfLetters = Math.floor((d.r * 2) / (font / 2));\n            if (numOfLetters < word.length) {\n              word = word.slice(0, numOfLetters - 3) + '...';\n            }\n            return word\n          });\n\n        const circleMentionText = circleNodes\n          .append('text')\n          .style('visibility', 'hidden')\n          .attr('class', 'wordcloud-text-mention')\n          .attr('font-size', d => (fontScale(d.data.size) * scaleDownFactor) )\n          .attr(\"transform\", d => `translate(0,${ fontScale(d.data.size) + 5 })`)\n          .text(d => `${d.data.size} Mentions`);\n        }\n\n      function buildData(datas) {\n        const root = d3.hierarchy({children: datas});\n        root.sum( d => d.size ).sort((a,b) => { return a.size - b.size; });\n        pack(root);\n\n        const nodes = root.descendants();\n        nodes.shift();\n        return nodes;\n      }\n\n      const hierarchyData = buildData(data);\n      build(hierarchyData);\n    }\n  }\n}\n</script>\n\n<style>\n\ng {\n  cursor: pointer;\n}\n\ntext.wordcloud-text-main,\ntext.wordcloud-text-mention {\n  text-anchor: middle;\n}\n\n.dashboard-tile {\n  font-size: 18px;\n  overflow: hidden;\n}\n\n#positive-word-cloud,\n#negative-word-cloud {\n  padding: 0;\n}\n\n#positive-word-cloud svg,\n#negative-word-cloud svg {\n  margin: 0 auto;\n}\n\n.word-cloud-body {\n  display: flex;\n  justify-content: space-between;\n}\n\n.dashboard-square {\n  max-width: 50%;\n  width: 450px;\n  text-align: center;\n  margin-top: 16px;\n}\n\n.dashboard-square-header {\n  font-weight: bolder;\n}\n\n.dashboard-tile-body {\n  display: flex;\n  flex-direction: column;\n}\n\n.dashboard-tile-body span {\n  line-height: 14px;\n  padding: 0;\n  margin: 0;\n}\n\n.empty-word-cloud {\n  color: #858585;\n  padding-top: 16px;\n}\n\n</style>\n"]}]}