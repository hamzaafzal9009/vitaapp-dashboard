{"remainingRequest":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/babel-loader/lib/index.js!/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/src/components/ParsingRules.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/src/components/ParsingRules.vue","mtime":1581270622000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/package.json","mtime":1587799327166},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hamzaafzal/OLD DATA/Mac Home/vueJS/OPINIION FINAL/opiniionv4/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ParsingRules.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"parsing-container\">\n    <div class=\"parsing-description\">\n      <span><label>Parsing Rule Name: </label> <input type=\"text\" :class=\"{'duplicate': dupeName, 'duplicate': includesDash}\" v-model=\"ruleName\" @change=\"evalName()\"><span class=\"dupeMessage\" v-if=\"dupeName\">Name Already Exists</span><span class=\"dupeMessage\" v-if=\"includesDash\">Name Cannot Contain \"-\"</span></span>\n      <span><label>Parsing Mailbox: </label> <input type=\"text\" v-model=\"mailbox\"><span v-if=\"mailbox && mailbox.length > 0\">{{ domain == 'app' ? '@livemail.opiniion.com' : '@demomail.opiniion.com' }}</span></span><br>\n      <span>Rule fires when </span>\n      <select v-model=\"trigger\">\n        <option value=\"subject\">Subject</option>\n        <option value=\"fileType\">File Type</option>\n        <option value=\"body\">Body</option>\n      </select>\n      <span v-if=\"trigger == 'subject' || trigger == 'body'\"> includes: <input type=\"text\" v-model=\"fileName\"> <span v-if=\"trigger == 'body'\" > in the first 500 characters) </span>\n      </span>\n      <span v-if=\"trigger == 'fileType'\"> is:\n        <select v-model=\"parseFileType\">\n          <option v-for=\"file in fileOptions\">{{file}}</option>\n        </select>\n        with <input type=\"text\" v-model=\"parseFileName\" placeholder=\"Insert filename element\"> in the filename.\n      </span>\n    </div>\n    <div class=\"mail-select\" v-if=\"trigger\">\n      <button @click=\"displaySamples = true\">Select Email To Create Parsing Rule</button>\n      <div class=\"email-container\" v-for=\"mail in sampleEmails\" v-if=\"displaySamples\">\n        <div class=\"email-headers\">\n          <span>From: {{mail.email.from}}</span>\n          <span>Subject: {{mail.email.subject}}</span>\n          <span v-if=\"mail.email.attachments && mail.email.attachments.length > 0\">Attachments:</span>\n          <span class=\"body-link\" v-if=\"!mail.email.attachments || mail.email.attachments.length == 0\" @click=\"parseBody(mail.email.body.textashtml)\">Use Body</span>\n        </div>\n        <div class=\"attachments\" v-for=\"attachment in mail.email.attachments\" v-if=\"mail && mail.email.attachments\">\n          <span @click=\"addFile(attachment)\">- {{attachment.filename}} {{attachment.size}}</span>\n        </div>\n      </div>\n      <div style=\"margin-top:5px;margin-left:80px;\" v-if=\"!fileExists\">No Email Selected Yet</div>\n      <div class=\"upload-container\">\n        Upload Example File to Set Parsing Rules\n        <input ref=\"fileInput\" type=\"file\" accept=\"text/csv, .xml, .xls, .xlsx, .txt\" @change=\"addManualFile($event)\" />\n      </div>\n    </div>\n    <div v-if=\"fileExists && !displaySamples && selectedFile\">Parsing {{selectedFile.filename}}</div>\n    <div class=\"data-display\" v-for=\"(rule, i) in rules\" v-if=\"fileExists\">\n      <div class=\"filter-options\" v-if=\"i != 0\">\n        <span >\n          <label v-if=\"rule.check != 'customerCreate'\">Filter by</label>\n          <select v-model=\"rule.check\">\n            <option value=\"remsel\">Remove & Select</option>\n            <option value=\"spmetrans\">Split, Merge, & Transpose</option>\n            <option value=\"refine\">Refine Cell Values</option>\n            <option value=\"customerCreate\" hidden>CreateCustomers</option>\n          </select>\n          <select v-if=\"rule.check == 'remsel'\" v-model=\"rule.option\" @change=\"changeFilter(i, rule.option, rule.input)\">\n            <option value=\"rowByVal\">Filter Rows by Values</option>\n            <option value=\"rowByLen\">Filter Rows by Length</option>\n            <!-- <option value=\"rowByValLen\">Filter Rows by Value Length</option>\n            <option value=\"rowByColLen\">Filter Column by Value Length</option> -->\n            <option value=\"rowRange\">Set Row Range</option>\n            <option value=\"colRange\">Set Column Range</option>\n            <option value=\"remCol\">Remove Columns</option>\n            <option value=\"remRow\">Remove Rows</option>\n          </select>\n          <select v-if=\"rule.check == 'spmetrans'\" v-model=\"rule.option\" @change=\"changeFilter(i, rule.option, rule.input)\">\n            <option value=\"explodeCol\">Explode Columns</option>\n            <option value=\"mergeCol\">Merge Columns</option>\n          </select>\n          <select v-if=\"rule.check == 'refine'\" v-model=\"rule.option\" @change=\"changeFilter(i, rule.option, rule.input)\">\n            <option value=\"searchReplace\">Search & Replace</option>\n            <option value=\"formDates\">Format Dates</option>\n          </select>\n          <div class=\"save-container\" v-if=\"rule.check == 'customerCreate'\">\n            Input Example:\n            <div class=\"api-example\">\n              https://api.opiniion.com/_services/opiniion/customer\n              {\n                \"location\": <v-select class=\"v-select\" v-model=\"rule.activeLocation\" :options=\"locationOptions\" :on-change=\"changeLocation(i, rule.activeLocation)\" placeholder=\"Select Location\" >\n                  <span slot=\"no-options\">Sorry, no locations were found with that filter.</span>\n                </v-select>\n                <span v-if=\"rule.option && rule.input.locationId\">\"uid\": {{rule.input.locationId}},</span>\n                <span v-if=\"rule.option && rule.input.apiKey\">\"apiKey\": {{rule.input.apiKey}},</span>\n                \"firstname\":  <select v-model=\"rule.input.firstname\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n                </select> ,\n                \"lastname\":  <select v-model=\"rule.input.lastname\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n                </select> ,\n                \"email\":  <select v-model=\"rule.input.email\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n                </select> ,\n                \"countrycode\": +1,\n                \"phone\":  <select v-model=\"rule.input.phone\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n                </select> ,\n                \"notes\":  <select v-model=\"rule.input.notes\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in maxColumn(rules[i-1].data, ['None', 'Custom'])\">{{option}}</option>\n                </select>\n                <span v-if=\"rule.input.notes == 'Custom'\">Custom Note: <input type=\"text\" v-model=\"rule.input.customNote\" @change=\"changeFilter(i, 'processCustomers', rule.input)\"> </span>\n                <span v-if=\"rule.input.location && rule.input.location.qsEnabled\">, \"q\":</span> <select v-if=\"rule.input.location && rule.input.location.qsEnabled\" v-model=\"rule.input.q\" @change=\"changeFilter(i, 'processCustomers', rule.input)\">\n                  <option v-for=\"option in qSelection\">{{option}}</option>\n                </select>\n              }\n            </div>\n          </div>\n          <span v-if=\"rule.option == 'rowByVal'\">\n            Keep row if column #\n            <input type=\"number\" v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\" min=\"0\">\n            <select v-model=\"rule.input.type\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option value=\"hasVal\" selected>has a value</option>\n              <option value=\"isWord\">is a single word</option>\n              <option value=\"isNum\">is a number</option>\n              <option value=\"conTerm\">contains a specfic term</option>\n              <option value=\"noConTerm\">doesn't contain term</option>\n            </select>\n            <input type=\"text\" v-if=\"rule.input.type == 'conTerm' || rule.input.type == 'noConTerm'\" v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n          </span>\n          <span v-if=\"rule.option == 'rowByLen'\">\n            Keep rows with <input type=\"number\" :min=\"0\" :max=\"rule.data[0] ? rule.data[0].length : 50\" v-model=\"rule.input.value\" @change=\"changeFilter(i, rule.option, rule.input)\"> Columns\n          </span>\n          <span v-if=\"rule.option == 'rowByValLen'\">\n            <select v-model=\"rule.input.type\">\n              <option value=\"remove\">Remove Row If</option>\n              <option value=\"keep\">Keep Row If</option>\n            </select>\n            row at column #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n            </select>\n            <select v-model=\"rulr.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option value=\"is\">is equal to</option>\n              <option value=\"not\">is not equal to</option>\n            </select>\n            <input type=\"number\" min=\"1\" max=\"50\" v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\"> characters in length\n          </span>\n          <span v-if=\"rule.option == 'rowByColLen'\">\n            <select v-model=\"rule.input.type\">\n              <option value=\"remove\">Remove Column If</option>\n              <option value=\"keep\">Keep column If</option>\n            </select>\n            at column number #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n            </select>\n            <select v-model=\"rulr.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option value=\"is\">is equal to</option>\n              <option value=\"not\">is not equal to</option>\n            </select>\n            <input type=\"number\" min=\"1\" max=\"50\" v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\"> characters in length\n          </span>\n          <span v-if=\"rule.option == 'rowRange'\">\n            <select v-model=\"rule.input.type\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option value=\"remove\">Remove From Start / End</option>\n              <option value=\"fix\">Fixed Start / End</option>\n            </select>\n            <span v-if=\"rule.input.type == 'remove'\">\n              Skip First\n              <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n              </select>\n              and crop last\n              <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n              </select>\n              rows\n            </span>\n            <span v-if=\"rule.input.type == 'fix'\">\n              From row #\n              <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n              </select>\n              to #\n              <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n              </select>\n            </span>\n          </span>\n          <span v-if=\"rule.option == 'colRange'\">\n            <select v-model=\"rule.input.type\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option value=\"remove\">Remove From Start / End</option>\n              <option value=\"fix\">Fixed Start / End</option>\n            </select>\n            <span v-if=\"rule.input.type == 'remove'\">\n              Skip First\n              <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n              </select>\n              and crop last\n              <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n              </select>\n              columns\n            </span>\n            <span v-if=\"rule.input.type == 'fix'\">\n              From column #\n              <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n              </select>\n              to #\n              <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n                <option v-for=\"option in maxColumn(rules[i-1].data)\">{{option}}</option>\n              </select>\n            </span>\n          </span>\n          <span v-if=\"rule.option == 'remCol'\">\n            Remove column #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value4\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value5\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in maxColumn(rules[i-1].data, ['None'])\">{{option}}</option>\n            </select>\n          </span>\n          <span v-if=\"rule.option == 'remRow'\">\n            Remove row #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index).concat(['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index).concat(['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index).concat(['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value4\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index).concat(['None'])\">{{option}}</option>\n            </select>\n            <select v-model=\"rule.input.value5\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index).concat(['None'])\">{{option}}</option>\n            </select>\n          </span>\n          <span v-if=\"rule.option == 'explodeCol'\">\n            Split column #\n            <select v-model=\"rule.input.type\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n            </select>\n            at occurence of\n            <input type=\"text\" v-model=\"rule.input.value\" @change=\"changeFilter(i, rule.option, rule.input)\"> (use space for between words)\n          </span>\n          <span v-if=\"rule.option == 'mergeCol'\">\n            merge from cell\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n            </select>\n            to\n            <select v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n            </select>\n            columns\n          </span>\n          <span v-if=\"rule.option == 'searchReplace'\">\n            In column #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n            </select>\n            replace\n            <input type=\"text\" v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n            with\n            <input type=\"text\" v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\">\n          </span>\n          <span v-if=\"rule.option == 'formDates'\">\n            Column #\n            <select v-model=\"rule.input.value1\" @change=\"changeFilter(i, rule.option, rule.input)\">\n              <option v-for=\"option in Array.from(new Array(rules[i-1].data.length),(val,index)=>index)\">{{option}}</option>\n            </select>\n            format from\n            <input type=\"text\" v-model=\"rule.input.value2\" @change=\"changeFilter(i, rule.option, rule.input)\">\n            to\n            <input type=\"text\" placeholder=\"Y-M-D\" v-model=\"rule.input.value3\" @change=\"changeFilter(i, rule.option, rule.input)\">\n          </span>\n        </span>\n      </div>\n      <div class=\"removal\" @click=\"removeRule(i)\" v-if=\"rule.data && i != 0\">Remove Rule <i class=\"fal fa-times\"></i> </div>\n      <div class=\"data-container\" :class=\"{'hidden': rule.data.length == 0}\" >\n        <div class=\"data-table border\"><div class=\"data-selection\"  v-for=\"column in maxColumn(rule.data)\">{{column}}</div></div>\n        <div class=\"data-table\" v-for=\"datapoint in rule.data\">\n          <div class=\"data-selection\" v-for=\"data in datapoint\" :title=\"data\">\n            {{data ? data : ''}}\n          </div>\n        </div>\n      </div>\n      <div class=\"\" v-if=\" fileExists && (!rule.data || rule.data.length == 0) && (rule.check != 'customerCreate')\">\n        No data would pass this filter.\n      </div>\n\n      <span >Add New Parsing Rule <i class=\"fal fa-plus\" @click=\"addRule(i)\" title=\"Add Additional Rule\"></i>\n      </span>\n\n      <span v-if=\"rule.data && i == rules.length -1\">\n        Add Customer Creation Rule  <i class=\"fal fa-plus\" v-if=\"rule.data && i == rules.length -1\" @click=\"addCustomerRule()\" title=\"Add Customer Creation Rule\"></i>\n      </span>\n\n      <span v-if=\"rule.check && rule.check == 'customerCreate' && rule.option && (rule.input.email || rule.input.phone) && ruleName && mailbox && !dupeName && !includesDash\"><button @click=\"saveRules()\"> Save Parsing Rules</button></span>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport config from \"../config.js\";\nimport { EventService } from \"../main\";\nimport Papa from \"../../node_modules/papaparse/papaparse.js\";\nimport ParsingService from \"../services/ParsingService.js\";\nimport UserService from \"../services/UserService.js\";\nimport LocationService from \"../services/LocationService.js\";\nimport XLSX from \"xlsx\";\nimport convertFromXML from \"xml-js\";\nimport vSelect from \"../../node_modules/vue-select/src/components/Select.vue\";\nimport AutomationService from '../services/AutomationService';\n\nexport default {\n  name: \"csvPreview\",\n  components: {\n    vSelect\n  },\n  data: function() {\n    return {\n      csv: [],\n      xml: [],\n      sampleEmails: [],\n      fileOptions: [\"csv\", \"xml\", \"xls\", \"xlsx\", \"txt\"],\n      indicators: [\"subject\", \"fromName\", \"body\"],\n      fileName: \"\",\n      fileExists: false,\n      displaySamples: false,\n      newFile: \"\",\n      trigger: \"\",\n      parseFileType: \"\",\n      parseFileName: \"\",\n      selectedFile: '',\n      mailbox: \"\",\n      json: \"\",\n      domain: \"\",\n      activeLocation: \"\",\n      locationOptions: [],\n      ruleName: \"\",\n      rules: [{ data: \"\", option: \"intialData\" }],\n      qSelection: ['default', 1, 2, 3],\n      allRuleNames: [],\n      dupeName: false,\n      includesDash: false,\n    };\n  },\n  computed: {\n    data() {\n      let vm = this;\n      if (vm.json) {\n        return vm.json.splice(1, 11);\n      }\n    }\n  },\n  created() {\n    if(this.$route.params.parser) {\n      this.getParsingRule();\n    }\n    this.selectedLocation = localStorage.getItem(\"locationId\");\n    this.getAllParsingRuleNames();\n    this.getLocationOptions();\n    this.getSampleMail();\n    this.domain = config.subDomain;\n  },\n  methods: {\n    getAllParsingRuleNames() {\n      let vm = this;\n      ParsingService.getParsingRules().then(response => {\n        response.response.map(rule => {\n          vm.allRuleNames.push(rule.parsingRules.name);\n        })\n      })\n    },\n    // evaluateData(data) {\n    //   data.map(line => {\n    //     console.log(line.length);\n    //   })\n    //   return data[0]\n    // },\n    evalName() {\n      let vm = this;\n      if(vm.allRuleNames.includes(vm.ruleName)) {\n        vm.dupeName = true;\n      } else if(vm.ruleName.includes(\"-\")) {\n        vm.includesDash = true;\n      } else {\n        vm.includesDash = false;\n        vm.dupeName = false;\n      }\n    },\n    maxColumn(data, concat) {\n      let lineLength = 0;\n      data.map(line => {\n        if(line.length > lineLength) lineLength = line.length\n      })\n      if(concat) {\n        return Array.from(new Array(lineLength),(val,index)=>index).concat(concat);\n      } else {\n        return Array.from(new Array(lineLength),(val,index)=>index);\n      }\n    },\n    getParsingRule(){\n      let vm = this;\n      ParsingService.getParsingRule(this.$route.params.parser).then(response => {\n        vm.selectedRule = response.result[0];\n        if(!this.$route.params.action) {\n\n          vm.ruleName = vm.selectedRule.parsingRules.name;\n          vm.mailbox = vm.selectedRule.mailbox.substr(0, vm.selectedRule.mailbox.indexOf('@'));\n        }\n        vm.rules = vm.selectedRule.parsingRules.rules;\n        vm.trigger = vm.selectedRule.parsingRules.trigger;\n        vm.parseFileType = vm.selectedRule.parsingRules.fileType;\n        vm.fileExists = true;\n        if(vm.trigger == 'subject') {\n          vm.fileName = vm.selectedRule.parsingRules.value;\n        } else {\n          vm.parseFileName = vm.selectedRule.parsingRules.parseFileName;\n        }\n        vm.rules.map(rule => {\n          if(rule.check && rule.check == 'customerCreate') {\n            rule.activeLocation = rule.input.location;\n          }\n        })\n      })\n    },\n    getLocationOptions() {\n      let vm = this;\n      UserService.getAllUserLocations().then(response => {\n        response.map(e => {\n          let singleLocation = {\n            label: e.name,\n            value: e.locationId,\n            api: e.apiKey,\n            qsEnabled: e.prop\n          };\n          vm.locationOptions.push(singleLocation);\n        });\n      });\n    },\n    getSampleMail() {\n      let vm = this;\n      ParsingService.getSampleMail().then(response => {\n        vm.sampleEmails = response.response;\n        // console.log(vm.sampleEmails);\n      });\n    },\n    addFile(file) {\n      let vm = this;\n      // EventService.$emit(\"loading\", \"show\");\n      if (file) {\n        vm.fileExists = true;\n        vm.displaySamples = false;\n        vm.selectedFile = file;\n        let exampleFile = file;\n        let fileName;\n        if(exampleFile.filename.includes('.zip')) {\n          fileName = exampleFile.filename.substr(0,exampleFile.filename.lastIndexOf('.'));\n          } else {\n          fileName = exampleFile.filename;\n        }\n        let fileType = fileName.substr(fileName.lastIndexOf(\".\") + 1);\n        if (fileType == \"xlsx\" || fileType == \"xls\") {\n          var rABS = true;\n          var data = atob(exampleFile.content);\n          if (!rABS) data = new Uint8Array(data);\n          var workbook = XLSX.read(data, { type: rABS ? \"binary\" : \"array\" });\n          let processedXLS = XLSX.utils.sheet_to_json(\n            workbook.Sheets[workbook.SheetNames[0]],\n            { header: 1 }\n          ).filter(row => {\n            return row.length > 0;\n          });\n          let maxSize = 0;\n          processedXLS.map(e => {\n            if(e.length > maxSize) maxSize = e.length;\n          })\n          let diff = maxSize - processedXLS[0].length;\n          while (diff > 0) {\n            processedXLS[0].push('-');\n            diff = maxSize - processedXLS[0].length;\n          }\n          if (processedXLS.length > 20) {\n            vm.rules[0].data = processedXLS\n              .splice(0, 11)\n              .concat(processedXLS.splice(-10));\n          } else {\n            vm.rules[0].data = processedXLS;\n          }\n        } else if (fileType == \"csv\") {\n          let processedCSV;\n          Papa.parse(atob(exampleFile.content), {\n            complete: function(results) {\n              processedCSV = results.data;\n              if (processedCSV.length > 20) {\n                vm.rules[0].data = processedCSV\n                  .splice(0, 11)\n                  .concat(processedCSV.splice(-10));\n              } else {\n                vm.rules[0].data = processedCSV;\n              }\n            }\n          });\n        } else if (fileType == \"xml\") {\n          var data = atob(exampleFile.content);\n          vm.convertXML(data);\n        } else if (fileType == \"txt\") {\n          var data = atob(exampleFile.content);\n          let parser = new DOMParser();\n          let newDoc = parser.parseFromString(JSON.parse(data), \"text/html\");\n          let test = newDoc.getElementsByTagName(\"tr\");\n          let newArr = [...test];\n          let customerList = [];\n          let headerArr = [];\n          newArr.map(g => {\n            let headers = g.getElementsByTagName(\"th\");\n            if (headers.length > 0) {\n              headerArr.push([...headers]);\n            }\n          });\n          let headersList = [];\n          headerArr.map(h => {\n            h.map(g => {\n              headersList.push(g.innerHTML);\n            });\n          });\n          let nextArr = [];\n          newArr.map(e => {\n            let testing = e.getElementsByTagName(\"td\");\n            let customer = {};\n            let nextArray = [...testing];\n            nextArray.map((f, i) => {\n              let header = headersList[i];\n              let value = f.textContent;\n              customer[header] = value;\n            });\n            if (Object.keys(customer).length > 3) {\n              customerList.push(customer);\n            }\n          });\n          let csvVersion = Papa.unparse(customerList);\n          let jsonVersion = Papa.parse(csvVersion);\n          jsonVersion = jsonVersion.data;\n          if (jsonVersion.length > 20) {\n            vm.rules[0].data = jsonVersion\n              .splice(0, 11)\n              .concat(jsonVersion.splice(-10));\n          } else {\n            vm.rules[0].data = jsonVersion;\n          }\n        } else {\n          console.log(\"Error, this has been rejected for incorrect file type.\");\n        }\n        if(vm.rules && vm.rules.length > 1) {\n          vm.rules.map((rule, i) => {\n            if(i > 0) {\n              rule.data.map(dataset => {\n                if(dataset && dataset.length > 0) {\n                  vm.changeFilter(i, rule.option, rule.input);\n                }\n              })\n            }\n          })\n        }\n      }\n    },\n    parseBody(email) {\n      let vm = this;\n      vm.fileExists = true;\n      vm.displaySamples = false;\n      vm.selectedFile = email;\n      var parser = new DOMParser();\n      var htmlDoc = parser.parseFromString(email, 'text/html');\n      var pArray = Array.from(htmlDoc.getElementsByTagName('p'));\n      let usableData = pArray[4].innerHTML.split('&lt;');\n      let customersList = [];\n      usableData.map((ptag, i) => {\n        customersList.push(ptag.substring(ptag.indexOf('<br>'))\n        .replace(/<a href=\"mailto:/gi, '')\n        .replace('\">', ' ')\n        .replace(/<\\/a>/gi, '')\n        .replace(/ -/gi, '')\n        .replace(/-/gi, '')\n        .replace(/ <br>/gi, '')\n        .replace(/<br>/gi, '')\n        .replace(/ &amp;/gi, '')\n        .replace(/&amp;/gi, '')\n        .split(' '));\n        // console.log(typeof ptag, ptag);\n      })\n      if (customersList.length > 100) {\n        vm.rules[0].data = customersList\n          .splice(0, 50)\n          .concat(customersList.splice(-50));\n      } else {\n        vm.rules[0].data = customersList;\n      }\n      // let parsedCustomers = [];\n      // let parsedData = Papa.parse(email, {delimeter: '\\\\n'});\n      // let unparsedData = Papa.unparse(parsedData.data);\n      // let newParseData = unparsedData.split('\\n');\n      // let customersList = [];\n      // newParseData.map(e => {\n      //   e = e.replace('\\n', '')\n      //   let data = e.split(' ');\n      //   if(data.length > 3) {\n      //     customersList.push(data);\n      //   }\n      // });\n      // // console.log(parsedCustomers);\n      // if (customersList.length > 100) {\n      //   vm.rules[0].data = customersList\n      //     .splice(0, 50)\n      //     .concat(customersList.splice(-50));\n      // } else {\n      //   vm.rules[0].data = customersList;\n      // }\n      // back end potential process.\n    // let lines = email.split('\\\\n');\n    // let parsedLines = []\n    // lines.map((l) => {\n    //   if (l.length > 10) {\n    //     let splitLine = l.split(' ');\n    //     let parsedLine = [];\n    //     splitLine.map((s) => {\n    //       if (s && s.length > 2) {\n    //         parsedLine.push(s);\n    //       }\n    //     })\n    //     parsedLines.push(parsedLine);\n    //   }\n    // })\n    //   if (parsedLines.length > 100) {\n    //     vm.rules[0].data = parsedLines\n    //       .splice(0, 50)\n    //       .concat(parsedLines.splice(-50));\n    //   } else {\n    //     vm.rules[0].data = parsedLines;\n    //   }\n    },\n    convertXML(xml) {\n      let vm = this;\n      let parser = new DOMParser();\n      let xmlDoc = parser.parseFromString(xml, \"text/xml\");\n      let xmlArr = xmlDoc.getElementsByTagName(\"Row\");\n      let newXMLArr = [...xmlArr];\n      let customerList = [];\n      newXMLArr.map(e => {\n        let customer = {};\n        let test = [...e.attributes];\n        test.map(f => {\n          let header = f.name;\n          let value = f.nodeValue;\n          customer[header] = value;\n        });\n        customerList.push(customer);\n      });\n      let csvVersion = Papa.unparse(customerList);\n      let jsonVersion = Papa.parse(csvVersion);\n      jsonVersion = jsonVersion.data;\n      if (jsonVersion.length > 20) {\n        vm.rules[0].data = jsonVersion\n          .splice(0, 11)\n          .concat(jsonVersion.splice(-10));\n      } else {\n        vm.rules[0].data = jsonVersion;\n      }\n    },\n    addRule(index) {\n      let vm = this;\n      vm.rules.splice( index+1, 0, {\n        data: [],\n        option: \"\",\n        input: {}\n      });\n    },\n    addCustomerRule() {\n      let vm = this;\n      vm.rules.push({\n        rule: vm.rules.length + 1,\n        check: \"customerCreate\",\n        data: [],\n        option: \"processCustomers\",\n        input: {}\n      });\n    },\n    removeRule(index) {\n      this.rules.splice(index, 1);\n    },\n    changeLocation(index, locationData) {\n      let vm = this;\n      if (vm.rules[index].input.location != locationData) {\n        vm.rules[index].input.location = locationData;\n        if(locationData && locationData.qsEnabled) {\n          AutomationService.getAutomationsByLocation(locationData.value).then(response => {\n            let qSelect = [];\n            response.result.map(auto => {\n              qSelect.push(auto.identifier)\n            })\n            vm.qSelection = qSelect;\n          })\n          // LocationService.getLocation(locationData.value).then(response => {\n            // let totalQs = response.question\n            // let automations = response.automations;\n            // automations.map(auto => {\n              //   vm.qSelection.push(automation.identifier)\n            // })\n          // })\n        }\n      }\n    },\n    changeFilter(index, option, input) {\n      let vm = this;\n      let previousData;\n      if (\n        vm.rules[index - 1].check &&\n        vm.rules[index - 1].check == \"customerCreate\"\n      ) {\n        previousData = JSON.parse(JSON.stringify(vm.rules[0].data));\n      } else {\n        previousData = JSON.parse(JSON.stringify(vm.rules[index - 1].data));\n      }\n      // console.log(...arguments);\n      switch (option) {\n        case \"rowByVal\":\n          if (input && input.value1 && input.type && input.value2) {\n            if (input.type == \"conTerm\") {\n              vm.rules[index].data = previousData.filter(e => {\n                return e[input.value1]\n                  .toLowerCase()\n                  .includes(typeof input.value2 == 'string' ? input.value2.toLowerCase() : input.value2);\n              });\n            } else if (input.type == \"noConTerm\") {\n              0;\n              vm.rules[index].data = previousData.filter(e => {\n                return !e[input.value1]\n                  .toLowerCase()\n                  .includes(typeof input.value2 == 'string' ? input.value2.toLowerCase() : input.value2);\n              });\n            }\n          } else if (input && input.value1 && input.type) {\n            if (input.type == \"hasVal\") {\n              vm.rules[index].data = previousData.filter(e => {\n                return e[input.value1];\n              });\n            } else if (input.type == \"isWord\") {\n              vm.rules[index].data = previousData.filter(e => {\n                // Needs more work to determine if string or not.\n                return (\n                  e[input.value1] &&\n                  typeof e[input.value1] == \"string\" &&\n                  e[input.value1].trim().indexOf(\" \") == -1\n                );\n              });\n            } else if (input.type == \"isNum\") {\n              // console.log(previousData);\n              vm.rules[index].data = previousData.filter(e => {\n                return parseInt(e[input.value1]);\n              });\n            }\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"rowByLen\":\n          if (input && input.value) {\n            vm.rules[index].data = previousData.filter(e => {\n              if (e) {\n                return e.length == input.value;\n              }\n            });\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"rowByValLen\":\n          break;\n\n        case \"rowByColLen\":\n          break;\n\n        case \"rowRange\":\n          if (input && input.type) {\n            if (input.type == \"remove\") {\n              if (input.value1 && input.value2) {\n                let newValues = previousData.slice(\n                  input.value1,\n                  vm.rules[index - 1].data.length - input.value2\n                );\n                vm.rules[index].data = newValues;\n              }\n            } else if (input.type == \"fix\") {\n              if (input.value1 && input.value2) {\n                let newValues = previousData.slice(\n                  input.value1,\n                  input.value2 - input.value1 + 1\n                );\n                vm.rules[index].data = newValues;\n              }\n            }\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"colRange\":\n          if (input && input.type) {\n            if (input.type == \"remove\") {\n              if (input.value1 && input.value2) {\n                let newValues = [];\n                vm.rules[index - 1].data.map(e => {\n                  newValues.push(\n                    e.slice(input.value1, e.length - input.value2)\n                  );\n                });\n                vm.rules[index].data = newValues;\n              }\n            } else if (input.type == \"fix\") {\n              if (input.value1 && input.value2) {\n                let newValues = [];\n                vm.rules[index - 1].data.map(e => {\n                  newValues.push(e.slice(input.value1, input.value2));\n                });\n                vm.rules[index].data = newValues;\n              }\n            }\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"remCol\":\n          if (\n            input &&\n            (input.value1 ||\n              input.value2 ||\n              input.value3 ||\n              input.value4 ||\n              input.value5)\n          ) {\n            let newValues = vm.rules[index - 1].data;\n            let inputKeys = Object.keys(input);\n            inputKeys.map((inputVal, g) => {\n              newValues = newValues.map((e, i) => {\n                return e.filter((x, j) => {\n                  return j != parseInt(input[inputVal]);\n                });\n              });\n            });\n            vm.rules[index].data = newValues;\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"remRow\":\n          if (\n            input &&\n            (input.value1 ||\n              input.value2 ||\n              input.value3 ||\n              input.value4 ||\n              input.value5)\n          ) {\n            let newData = previousData;\n            let inputKeys = Object.keys(input);\n            inputKeys.map(inputVal => {\n              newData = newData.filter((e, i) => {\n                return i != parseInt(input[inputVal]);\n              });\n            });\n            vm.rules[index].data = newData;\n          } else {\n            vm.rules[index].data = previousData;\n          }\n          break;\n\n        case \"explodeCol\":\n          if (input && input.type && input.value) {\n            let colLengths = [];\n            vm.rules[index - 1].data.map(e => {\n              if(e[input.type]) {\n                colLengths.push(e[input.type].split(input.value).length);\n              }\n            });\n            let newColNum = Math.max(...colLengths);\n            let newValues = previousData;\n            newValues.map(e => {\n              if(e[input.type]) {\n                let newColumns = e[input.type].split(input.value);\n                if (newColumns.length != newColNum) {\n                  newColumns.length = newColNum;\n                  newColumns.fill(0, newColumns.length);\n                }\n                e.splice(input.type, 1, ...newColumns);\n              }\n            });\n            vm.rules[index].data = newValues;\n          } else {\n            vm.rules[index].data = vm.rules[index - 1].data;\n          }\n          break;\n\n        case \"mergeCol\":\n          if (input && input.value1 && input.value2) {\n            let input1 = parseInt(input.value1);\n            let input2 = parseInt(input.value2);\n            let newArray = [];\n            let newValues = previousData;\n            newValues.map(x => {\n              let newItem = x\n                .slice(input1, input2 + 1)\n                .join()\n                .replace(\",\", \", \");\n              x.splice(input1, input2 + 1 - input1, newItem);\n              newArray.push(x);\n            });\n            vm.rules[index].data = newArray;\n          } else {\n            vm.rules[index].data = vm.rules[index - 1].data;\n          }\n          break;\n\n        case \"searchReplace\":\n          if (input && input.value1 && input.value2) {\n            let input1 = parseInt(input.value1);\n            if (!input.value3) input.value3 = \"\";\n            let newValues = previousData;\n            newValues.map(e => {\n              e[input1] = e[input1]\n                .toString()\n                .replace(input.value2, input.value3);\n            });\n            vm.rules[index].data = newValues;\n          } else {\n            vm.rules[index].data = vm.rules[index - 1].data;\n          }\n          break;\n\n        case \"formDates\":\n          if (input && input.value1 && input.value2) {\n            alert(\n              \"Can't do this operation at this time until we standardize what dates we want coming in, if we do want to capture that data.\"\n            );\n          } else {\n            vm.rules[index].data = vm.rules[index - 1].data;\n          }\n          break;\n\n        case \"processCustomers\":\n          if (input.email || input.phone) {\n            let data = previousData;\n            let customerList = [];\n            data.map(customer => {\n              let newCustomer = {\n                firstname: input.firstname ? customer[input.firstname] : \"\",\n                lastname: input.lastname ? customer[input.lastname] : \"\",\n                email: input.email ? customer[input.email] : \"\",\n                phone: input.phone ? customer[input.phone] : \"\",\n                notes: input.notes ? customer[input.notes] : \"\"\n              };\n              if(input.notes == 'Custom') {\n                newCustomer.notes = input.customNote;\n              }\n              customerList.push(newCustomer);\n            });\n            vm.rules[index].data = customerList;\n          }\n          break;\n\n        default:\n          if (input && input.value) {\n            console.log(input.value);\n          } else {\n            vm.rules[index].data = vm.rules[index - 1].data;\n          }\n      }\n      if (index != vm.rules.length - 1) {\n        vm.rules.map((e, i) => {\n          if (i > index) {\n            vm.changeFilter(i, e.option, e.input);\n          }\n        });\n      }\n    },\n    mapData() {\n      this.csvData.map((e, i) => {\n        e.map((h, j) => {\n          h = h.trim();\n        });\n      });\n    },\n    addManualFile(event) {\n      let vm = this;\n      // EventService.$emit(\"loading\", \"show\");\n      if (event.target.files[0]) {\n        vm.fileExists = true;\n        let exampleFile = event.target.files[0];\n        let fileName = exampleFile.name;\n        let fileType = fileName.substr(fileName.indexOf(\".\") + 1);\n        if (fileType == \"xlsx\" || fileType == \"xls\") {\n          var rABS = true;\n          var reader = new FileReader();\n          reader.onload = function(e) {\n            var data = e.target.result;\n            if (!rABS) data = new Uint8Array(data);\n            var workbook = XLSX.read(data, { type: rABS ? \"binary\" : \"array\" });\n            let processedXLS = XLSX.utils.sheet_to_json(\n              workbook.Sheets[workbook.SheetNames[0]],\n              { header: 1 }\n            ).filter(row => {\n            return row.length > 0;\n          });;\n            let maxSize = 0;\n            processedXLS.map(e => {\n              if(e.length > maxSize) maxSize = e.length;\n            })\n            let diff = maxSize - processedXLS[0].length;\n            while (diff > 0) {\n              processedXLS[0].push('-');\n              diff = maxSize - processedXLS[0].length;\n            }\n            if (processedXLS.length > 20) {\n              vm.rules[0].data = processedXLS\n                .splice(0, 11)\n                .concat(processedXLS.splice(-10));\n            } else {\n              vm.rules[0].data = processedXLS;\n            }\n          };\n          if (rABS) reader.readAsBinaryString(exampleFile);\n          else reader.readAsArrayBuffer(exampleFile);\n        } else if (fileType == \"csv\") {\n          let processedCSV;\n          Papa.parse(exampleFile, {\n            complete: function(results) {\n              processedCSV = results.data;\n              if (processedCSV.length > 20) {\n                vm.rules[0].data = processedCSV\n                  .splice(0, 11)\n                  .concat(processedCSV.splice(-10));\n              } else {\n                vm.rules[0].data = processedCSV;\n              }\n            }\n          });\n        } else if (fileType == \"xml\") {\n          let reader = new FileReader();\n          reader.onload = function(e) {\n            var data = e.target.result;\n            vm.convertManualXML(data);\n          };\n          reader.readAsText(exampleFile);\n        } else if (fileType == \"txt\") {\n          let reader = new FileReader();\n          reader.onload = function(e) {\n            var data = e.target.result;\n            let parser = new DOMParser();\n            let newDoc = parser.parseFromString(JSON.parse(data), \"text/html\");\n            let test = newDoc.getElementsByTagName(\"tr\");\n            let newArr = [...test];\n            let customerList = [];\n            let headerArr = [];\n            newArr.map(g => {\n              let headers = g.getElementsByTagName(\"th\");\n              if (headers.length > 0) {\n                headerArr.push([...headers]);\n              }\n            });\n            let headersList = [];\n            headerArr.map(h => {\n              h.map(g => {\n                headersList.push(g.innerHTML);\n              });\n            });\n            let nextArr = [];\n            newArr.map(e => {\n              let testing = e.getElementsByTagName(\"td\");\n              let customer = {};\n              let nextArray = [...testing];\n              nextArray.map((f, i) => {\n                let header = headersList[i];\n                let value = f.textContent;\n                customer[header] = value;\n              });\n              if (Object.keys(customer).length > 3) {\n                customerList.push(customer);\n              }\n            });\n            let csvVersion = Papa.unparse(customerList);\n            let jsonVersion = Papa.parse(csvVersion);\n            jsonVersion = jsonVersion.data;\n            // console.log(jsonVersion);\n            if (jsonVersion.length > 100) {\n              vm.rules[0].data = jsonVersion\n                .splice(0, 50)\n                .concat(jsonVersion.splice(-50));\n            } else {\n              vm.rules[0].data = jsonVersion;\n            }\n          };\n          reader.readAsText(exampleFile);\n        } else {\n          console.log(\"Error, this has been rejected for incorrect file type.\");\n        }\n        if(vm.rules && vm.rules.length > 1) {\n          vm.rules.map((rule, i) => {\n            if(i > 0) {\n              rule.data.map(dataset => {\n                if(dataset && dataset.length > 0) {\n                  vm.changeFilter(i, rule.option, rule.input);\n                }\n              })\n            }\n          })\n        }\n      }\n    },\n    convertManualXML(xml) {\n      let vm = this;\n      let parser = new DOMParser();\n      let xmlDoc = parser.parseFromString(xml, \"text/xml\");\n      let xmlArr = xmlDoc.getElementsByTagName(\"Row\");\n      let newXMLArr = [...xmlArr];\n      let customerList = [];\n      newXMLArr.map(e => {\n        let customer = {};\n        let test = [...e.attributes];\n        test.map(f => {\n          let header = f.name;\n          let value = f.nodeValue;\n          customer[header] = value;\n        });\n        customerList.push(customer);\n      });\n      let csvVersion = Papa.unparse(customerList);\n      let jsonVersion = Papa.parse(csvVersion);\n      jsonVersion = jsonVersion.data;\n      if (jsonVersion.length > 20) {\n        vm.rules[0].data = jsonVersion\n          .splice(0, 11)\n          .concat(jsonVersion.splice(-10));\n      } else {\n        vm.rules[0].data = jsonVersion;\n      }\n    },\n    saveRules() {\n      let vm = this;\n      let ruleId = null;\n      if(this.$route.params.parser && !this.$route.params.action) {\n        ruleId = this.$route.params.parser;\n      }\n      let parsingObject = {\n        name: vm.ruleName,\n        trigger: vm.trigger,\n        fileType: vm.parseFileType,\n        parseFileName: vm.parseFileName,\n        value: vm.fileName,\n        rules: vm.rules\n      };\n      let completeMailbox = ''\n      if(vm.mailbox.includes('@livemail.opiniion.com') || vm.mailbox.includes('@demomail.opiniion.com')) {\n        completeMailbox = vm.mailbox;\n      } else {\n        completeMailbox =\n        vm.domain == \"app\"\n          ? vm.mailbox + \"@livemail.opiniion.com\"\n          : vm.mailbox + \"@demomail.opiniion.com\";\n        }\n      ParsingService.saveParsingRules(completeMailbox, parsingObject, ruleId).then(\n        response => {\n          if (response.success) {\n            (vm.csv = []),\n            (vm.xml = []),\n            (vm.fileOptions = [\"csv\", \"xml\", \"xls\", \"xlsx\", \"txt\"]),\n            (vm.indicators = [\"subject\", \"fromName\", \"body\"]),\n            (vm.fileName = \"\"),\n            (vm.fileExists = false),\n            (vm.newFile = \"\"),\n            (vm.trigger = \"\"),\n            (vm.parseFileType = \"\"),\n            (vm.mailbox = \"\"),\n            (vm.json = \"\"),\n            (vm.domain = \"\"),\n            (vm.activeLocation = \"\"),\n            (vm.locationOptions = []),\n            (vm.ruleName = \"\"),\n            vm.selectedFile = '',\n            (vm.rules = [{ rule: 1, data: \"\", option: \"intialData\" }]);\n            vm.$router.push('/parsingList')\n          }\n        }\n      );\n    }\n  }\n};\n</script>\n\n<style scoped>\n.parsing-container {\n  min-height: 100vh;\n  background: white;\n  min-width: 100%;\n  padding-left: 10px;\n}\n\n.parsing-description {\n  margin-left: 30px;\n}\n\n.data-container {\n  border: 1px solid grey;\n  overflow: scroll;\n  max-height: 400px;\n  font-size: 14px;\n  margin-bottom: 20px;\n}\n\n.mail-select {\n  margin-left: 30px;\n}\n\n.mail-select button {\n  background: #4fcbc5;\n  color: white;\n  margin: 20px 0 0 20px;\n  cursor: pointer;\n}\n\n.email-container {\n  margin: 20px 0 0 20px;\n  width: 400px;\n  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.25);\n  padding: 10px 20px;\n}\n\n.email-headers {\n  display: flex;\n  flex-direction: column;\n}\n\n.removal {\n  width: 200px;\n  cursor: pointer;\n  border-radius: 3px;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.55);\n  padding: 5px 10px;\n  margin: 10px 0;\n  display: flex;\n  justify-content: space-between;\n  background: orange;\n  color: rgb(255, 248, 236);\n  font-size: 18px;\n}\n\n.attachments {\n  margin-left: 20px;\n}\n\n.attachments span {\n  cursor: pointer;\n}\n\n.body-link {\n  cursor: pointer;\n}\n\n.hidden {\n  display: none;\n}\n\n.border {\n  border-bottom: 1px solid lightgrey;\n}\n\n.data-table {\n  display: flex;\n  flex-direction: row;\n}\n\n.data-selection {\n  flex: 0 0 180px;\n  margin: 5px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.fa-plus {\n  margin: 15px;\n  font-size: 20px;\n}\n\nbutton {\n  cursor: pointer;\n  border-radius: 3px;\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.55);\n  padding: 5px 10px;\n  background: #4fcbc5;\n  color: white;\n}\n\n.dupeMessage {\n  color: red;\n  position: absolute;\n  transform: translate(-90px, 35px);\n  font-size: 11px;\n}\n\n</style>\n"],"sourceRoot":"src/components"}]}